{"version":3,"sources":["redux/types.ts","redux/actions.ts","components/Authorization/Authorization.tsx","redux/selectors.ts","components/Header/Header.tsx","components/ChangeHeaderForm/ChangeHeaderForm.tsx","components/TaskPopupDescriptionForm/TaskPopupDescriptionForm.tsx","components/TaskPopupCommentForm/TaskPopupCommentForm.tsx","components/Comment/Comment.tsx","components/TaskPopup/TaskPopup.tsx","components/Task/Task.tsx","components/Desk/Desk.tsx","App.tsx","redux/rootReducer.ts","reportWebVitals.ts","index.tsx"],"names":["SET_USERNAME","ADD_NEW_DESK","UPDATE_DESK_TITLE","REMOVE_DESK","REMOVE_ALL_DESKS","ADD_NEW_TASK","REMOVE_TASK","UPDATE_TASK_DESCRIPTION","ADD_NEW_COMMENT","UPDATE_COMMENT","REMOVE_COMMENT","setUsername","username","type","payload","Autorization","dispatch","useDispatch","useState","inputValue","setInputValue","Container","Form","onSubmit","e","preventDefault","Label","htmlFor","Input","name","id","autoComplete","placeholder","value","onChange","target","required","SubmitBtn","styled","div","form","label","input","button","selectState","state","selectUsername","selectCommentsByTaskId","taskId","comments","filter","comment","Header","useSelector","AppHeader","WelcomeText","Button","onClick","NewDeskForm","title","uuidv4","currentTarget","reset","FormLabel","FormInput","RemoveDesksButton","header","p","ChangeHeaderForm","deskId","changeFormVisibility","onBlurHideHeaderForm","textInput","useRef","useEffect","current","focus","HeaderForm","updateDeskTitle","onBlur","ref","TaskPopupDescriptionForm","onClickChangeTaskDescriptionFormVisibility","initialValue","TaskPopupForm","description","stopPropagation","TaskInputLabel","TaskDescriptionInput","FormBtnsWrapper","FormSubmitBtn","CloseInputFormBtn","TaskPopupCommentForm","onFocusShowCommentBtnsWrapper","hasCommentFormFocused","hideCommentBtnsWrapper","author","text","TaskCommentLabel","TaskCommentTextInput","onFocus","aria-label","Comment","hasCommentClicked","setHasCommentClicked","Root","Author","BtnsWrapper","Text","li","TaskPopup","deskname","task","onClickChangeTaskPopupVisibility","hasTaskDescriptionClicked","setHasTaskDescriptionClicked","setHasCommentFormFocused","prev","handleWindowKeyPress","key","window","addEventListener","removeEventListener","handleWindowClick","TaskPopupOverlay","TaskPopupContainer","TaskPopupHeader","TaskName","CloseTaskPopupBtn","DeskName","TaskAuthor","TaskDescriptionHeader","TaskDescription","length","map","h3","Task","hasTaskClicked","setHasTaskClicked","DeleteTaskButton","CommentsCounter","Desk","tasks","selectTasksByDeskId","hasDeskHeaderClicked","setHasDeskHeaderClicked","DeskContainer","DeskHeaderWrapper","DeskHeader","RemoveDeskButton","removeDesk","NewTaskForm","addNewTask","NewTaskLabel","NewTaskInput","AddNewTaskButton","h2","App","isAuthorized","Boolean","localStorage","setItem","JSON","stringify","HiddenHeader","DesksContainer","desks","desk","h1","initialStateJSON","getItem","initialState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","parse","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfc6bea5.chunk.js","sourcesContent":["export const SET_USERNAME = 'SET_USERNAME';\nexport const ADD_NEW_DESK = 'ADD_NEW_DESK';\nexport const UPDATE_DESK_TITLE = 'UPDATE_DESK_TITLE';\nexport const REMOVE_DESK = 'REMOVE_DESK';\nexport const REMOVE_ALL_DESKS = 'REMOVE_ALL_DESKS';\nexport const ADD_NEW_TASK = 'ADD_NEW_TASK';\nexport const REMOVE_TASK = 'REMOVE_TASK';\nexport const UPDATE_TASK_DESCRIPTION = 'UPDATE_TASK_DESCRIPTION';\nexport const ADD_NEW_COMMENT = 'ADD_NEW_COMMENT';\nexport const UPDATE_COMMENT = 'UPDATE_COMMENT';\nexport const REMOVE_COMMENT = 'REMOVE_COMMENT';\n\ninterface SetUsernameAction {\n  type: typeof SET_USERNAME,\n  payload: {\n    username: string\n  }\n}\n\ninterface AddNewDeskAction {\n  type: typeof ADD_NEW_DESK,\n  payload: {\n    title: string,\n    id: string\n  }\n}\n\ninterface UpdateDeskTitleAction {\n  type: typeof UPDATE_DESK_TITLE,\n  payload: {\n    title: string,\n    id: string\n  }\n}\n\ninterface RemoveDeskAction {\n  type: typeof REMOVE_DESK,\n  payload: {\n    deskId: string\n  }\n}\n\ninterface RemoveAllDesksAction {\n  type: typeof REMOVE_ALL_DESKS\n}\n\ninterface AddNewTaskAction {\n  type: typeof ADD_NEW_TASK,\n  payload: {\n    title: string, \n    id: string, \n    description: string, \n    author: string, \n    deskId: string\n  }\n}\n\ninterface RemoveTaskAction {\n  type: typeof REMOVE_TASK,\n  payload: {\n    id: string\n  }\n}\n\ninterface UpdateTaskDescriptionAction {\n  type: typeof UPDATE_TASK_DESCRIPTION,\n  payload: {\n    description: string, \n    id: string\n  }\n}\n\ninterface AddNewCommentAction {\n  type: typeof ADD_NEW_COMMENT,\n  payload: {\n    author: string, \n    text: string, \n    id: string, \n    taskId: string\n  }\n}\n\ninterface UpdateCommentAction {\n  type: typeof UPDATE_COMMENT,\n  payload: {\n    text: string,\n    id: string\n  }\n}\n\ninterface RemoveCommentAction {\n  type: typeof REMOVE_COMMENT,\n  payload: {\n    id: string\n  }\n}\n\nexport type Action =\n  | SetUsernameAction\n  | AddNewDeskAction \n  | UpdateDeskTitleAction \n  | RemoveDeskAction \n  | RemoveAllDesksAction \n  | AddNewTaskAction \n  | RemoveTaskAction \n  | UpdateTaskDescriptionAction \n  | AddNewCommentAction \n  | UpdateCommentAction \n  | RemoveCommentAction;","import { \n  SET_USERNAME, \n  ADD_NEW_DESK, \n  UPDATE_DESK_TITLE, \n  REMOVE_DESK, \n  REMOVE_ALL_DESKS, \n  ADD_NEW_TASK, \n  REMOVE_TASK, \n  UPDATE_TASK_DESCRIPTION, \n  ADD_NEW_COMMENT, \n  UPDATE_COMMENT, \n  REMOVE_COMMENT \n} from './types';\nimport { v4 as uuidv4} from 'uuid';\n\nexport function setUsername(username: string) {\n  return {\n    type: SET_USERNAME,\n    payload: {\n      username\n    }\n  }\n}\n\nexport function addNewDesk(title: string) {\n  return {\n    type: ADD_NEW_DESK,\n    payload: {\n      title,\n      id: uuidv4()\n    }\n  }\n}\n\nexport function updateDeskTitle(title: string, id: string) {\n  return {\n    type: UPDATE_DESK_TITLE,\n    payload: {\n      title,\n      id\n    }\n  }\n}\n\nexport function removeDesk(deskId: string) {\n  return {\n    type: REMOVE_DESK,\n    payload: {\n      deskId\n    }\n  }\n}\n\nexport function removeAllDesks() {\n  return {\n    type: REMOVE_ALL_DESKS\n  }\n}\n\nexport function addNewTask(title: string, deskId: string, author: string) {\n  return {\n    type: ADD_NEW_TASK,\n    payload: {\n      title, \n      id: uuidv4(), \n      description: '', \n      author, \n      deskId\n    }\n  }\n}\n\nexport function removeTask(id: string) {\n  return {\n    type: REMOVE_TASK,\n    payload: {\n      id\n    }\n  }\n}\n\nexport function updateTaskDescription(description: string, id: string) {\n  return {\n    type: UPDATE_TASK_DESCRIPTION,\n    payload: {\n      description, \n      id\n    }\n  }\n}\n\nexport function addNewComment(author: string, text: string, id: string) {\n  return {\n    type: ADD_NEW_COMMENT,\n    payload: {\n      author, \n      text, \n      id: uuidv4(), \n      taskId: id\n    }\n  }\n}\n\nexport function updateComment(text: string, id: string) {\n  return {\n    type: UPDATE_COMMENT,\n    payload: {\n      text,\n      id\n    }\n  }\n}\n\nexport function removeComment(id: string) {\n  return {\n    type: REMOVE_COMMENT,\n    payload: {\n      id\n    }\n  }\n}","import React, { ChangeEvent, FormEvent, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { setUsername } from '../../redux/actions';\n\nfunction Autorization() {\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState('');\n\n  function onSubmit(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch(setUsername(inputValue));\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>) {\n    setInputValue(e.target.value);\n  }\n\n  return (\n    <Container>\n      <Form onSubmit={onSubmit}>\n        <Label htmlFor='login'>Enter your name</Label>\n        <Input type='text' name='login' id='login' autoComplete='off' placeholder='Your name' value={inputValue} onChange={onChange} required/>\n        <SubmitBtn type='submit'>Confirm</SubmitBtn>\n      </Form>\n    </Container>\n  )\n}\n\nexport default Autorization;\n\nconst Container = styled.div`\n  padding: 30px 80px;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border: 2px solid black;\n  border-radius: 10px;\n`\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Label = styled.label`\n  margin-bottom: 15px;\n  font-size: 36px;\n  font-weight: 300;\n`\n\nconst Input = styled.input`\n  margin-bottom: 15px;\n  padding: 5px;\n  font-size: 20px;\n  text-align: center;\n  border: none;\n  border-bottom: 1px solid black;\n`\n\nconst SubmitBtn = styled.button`\n  padding: 8px 15px;\n  font-size: 22px;\n  color: white;\n  text-transform: uppercase;\n  background-color: black;\n  border: none;\n  border-radius: 5px;\n`","import { State } from './../types';\r\n\r\nexport function selectState(state: State) {\r\n  return state;\r\n}\r\n\r\nexport function selectUsername(state: State) {\r\n  return state.username;\r\n}\r\n\r\nexport function selectTasksByDeskId(deskId: string) {\r\n  return (state: State) => state.tasks.filter(task => task.deskId === deskId);\r\n}\r\n\r\nexport function selectCommentsByTaskId(taskId: string) {\r\n  return (state: State) => state.comments.filter(comment => comment.taskId === taskId);\r\n}","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { addNewDesk, removeAllDesks, setUsername } from '../../redux/actions';\nimport { selectUsername } from '../../redux/selectors';\n\nfunction Header() {\n  const dispatch = useDispatch();\n  const username = useSelector(selectUsername);\n  const [inputValue, setInputValue] = useState('');\n\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch(addNewDesk(inputValue));\n    e.currentTarget.reset();\n  }\n\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(e.target.value);\n  }\n\n  return (\n    <AppHeader>\n      <WelcomeText>Hello, {username}!</WelcomeText>\n      <Button type='button' onClick={() => dispatch(setUsername(''))}>Change user</Button>\n      <NewDeskForm onSubmit={onSubmit}>\n        <FormLabel htmlFor='deskname'>Enter new deskname</FormLabel>\n        <FormInput type='text' name='deskname' id='deskname' placeholder='Desk name' autoComplete='off' onChange={onChange} required/>\n        <Button type='submit'>Confirm</Button>\n      </NewDeskForm>\n      <RemoveDesksButton onClick={() => dispatch(removeAllDesks())}>Remove all desks</RemoveDesksButton>\n    </AppHeader>\n  )\n}\n\nexport default Header;\n\nconst AppHeader = styled.header`\n  margin-bottom: 30px;\n  padding-top: 40px;\n  display: flex;\n  justify-content: center;\n`\n\nconst WelcomeText = styled.p`\n  margin-right: 20px;\n  font-size: 36px;\n  font-weight: 700;\n`\n\nconst Button = styled.button`\n  margin-right: 20px;\n  padding: 3px 10px;\n  font-size: 20px;\n  text-transform: uppercase;\n  color: white;\n  background-color: black;\n  border: none;\n  border-radius: 5px;\n`\n\nconst RemoveDesksButton = styled(Button)`\n  margin-right: 0;\n`\n\nconst NewDeskForm = styled.form`\n  display: flex;\n  align-content: stretch;\n`\n\nconst FormLabel = styled.label`\n  margin-right: 15px;\n  font-size: 20px;\n  align-self: center;\n`\n\nconst FormInput = styled.input`\n  margin-right: 15px;\n  font-size: 20px;\n  border: none;\n  border-image: initial;\n  border-bottom: 1px solid black;\n`","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { updateDeskTitle } from '../../redux/actions';\n\ninterface Props {\n  title: string,\n  deskId: string,\n  changeFormVisibility: () => void,\n  onBlurHideHeaderForm: () => void\n}\n\nfunction ChangeHeaderForm({title, deskId, changeFormVisibility, onBlurHideHeaderForm}: Props) {\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState(title);\n  const textInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (textInput.current !== null) {\n      textInput.current.focus();\n    }\n  }, []);\n\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(e.target.value);\n  }\n\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch(updateDeskTitle(inputValue, deskId));\n    changeFormVisibility();\n  }\n\n  return (\n    <HeaderForm onSubmit={onSubmit} onBlur={onBlurHideHeaderForm}>\n      <Label>Change desk name</Label>\n      <Input type='text' ref={textInput} name='deskName' id='deskName' placeholder={inputValue} value={inputValue} autoComplete='off' onChange={onChange} required/>\n    </HeaderForm>\n  )\n}\n\nexport default ChangeHeaderForm;\n\nconst HeaderForm = styled.form`\n  margin-bottom: 15px;\n  width: 100%;\n  display: flex;\n`\n\nconst Label = styled.label`\n  font-size: 0;\n`\n\nconst Input = styled.input`\n  margin: 0px auto 10px;\n  width: min-content;\n  text-align: center;\n  font-size: 24px;\n  font-weight: 800;\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px solid black;\n`","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { updateTaskDescription } from '../../redux/actions';\n\ninterface TaskPopupDescriptionFormProps {\n  onClickChangeTaskDescriptionFormVisibility: () => void,\n  initialValue: string,\n  taskId: string\n}\n\nfunction TaskPopupDescriptionForm({\n  onClickChangeTaskDescriptionFormVisibility,\n  initialValue,\n  taskId}: TaskPopupDescriptionFormProps) {\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState(initialValue);\n  \n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch(updateTaskDescription(inputValue, taskId));\n    onClickChangeTaskDescriptionFormVisibility();\n  }\n\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(e.target.value);\n  }\n\n  function onClick() {\n    onClickChangeTaskDescriptionFormVisibility();\n  }\n\n  return (\n    <TaskPopupForm onSubmit={onSubmit} onClick={(e) => e.stopPropagation()}>\n      <TaskInputLabel htmlFor='taskDescription'>Change description</TaskInputLabel>\n      <TaskDescriptionInput\n        name='taskDescription'\n        placeholder='Add task description' \n        autoComplete='off'\n        type='text' \n        id='taskDescription' \n        value={inputValue}\n        onChange={onChange}\n      />\n      <FormBtnsWrapper>\n        <FormSubmitBtn type='submit'>Confirm</FormSubmitBtn>\n        <CloseInputFormBtn type='button' onClick={onClick}/>\n      </FormBtnsWrapper>\n    </TaskPopupForm>\n  )\n}\n\nexport default TaskPopupDescriptionForm;\n\nconst TaskPopupForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`\n\nconst TaskInputLabel = styled.label`\n  font-size: 0;\n`\n\nconst TaskDescriptionInput = styled.input`\n  margin-bottom: 10px;\n  padding: 5px;\n  width: 100%;\n  font-size: 18px;\n  border: 2px solid black;\n  border-radius: 5px;\n  resize: none;\n  outline: none;\n  box-sizing: border-box;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  &:active {\n    opacity: 0.8;\n  }\n`\n\nconst FormBtnsWrapper = styled.div`\n  margin-bottom: 15px;\n  display: flex;\n`\n\nconst FormSubmitBtn = styled.button`\n  margin-right: 10px;\n  padding: 4px 10px;\n  font-size: 16px;\n  color: white;\n  background-color: black;\n  text-transform: uppercase;\n  border-radius: 5px;\n`\n\nconst CloseInputFormBtn = styled.button`\n  width: 28px;\n  height: 28px;\n  position: relative;\n  background-color: black;\n  border: none;\n  border-radius: 5px;\n\n  &::before {\n    content: '';\n    width: 25px;\n    height: 2px;\n    background-color: white;\n    position: absolute;\n    bottom: 13px;\n    left: 2px;\n    transform: rotate(-45deg);\n  }\n\n  &::after {\n    content: '';\n    width: 25px;\n    height: 2px;\n    background-color: white;\n    position: absolute;\n    top: 13px;\n    left: 2px;\n    transform: rotate(45deg);\n  }\n`","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { addNewComment } from '../../redux/actions';\nimport { selectUsername } from '../../redux/selectors';\n\ninterface TaskPopupCommentFormProps {\n  taskId: string,\n  onFocusShowCommentBtnsWrapper: () => void,\n  hasCommentFormFocused: boolean,\n  hideCommentBtnsWrapper: () => void\n}\n\nfunction TaskPopupCommentForm({ \n  taskId, \n  onFocusShowCommentBtnsWrapper, \n  hasCommentFormFocused, \n  hideCommentBtnsWrapper\n}: TaskPopupCommentFormProps) {\n  const username = useSelector(selectUsername);\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState('');\n\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch(addNewComment(username, inputValue, taskId));\n    hideCommentBtnsWrapper();\n    e.currentTarget.reset();\n  }\n\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(e.target.value);\n  }\n\n  return (\n    <TaskPopupForm onSubmit={onSubmit} onClick={e => e.stopPropagation()}>\n      <TaskCommentLabel htmlFor='comment'>Enter new comment</TaskCommentLabel>\n      <TaskCommentTextInput \n        name='comment' \n        placeholder='Add new comment' \n        autoComplete='off'\n        type='text' \n        id='comment' \n        onFocus={() => onFocusShowCommentBtnsWrapper()} \n        onChange={onChange}\n        required\n      />\n      {hasCommentFormFocused && \n        <FormBtnsWrapper>\n          <FormSubmitBtn type='submit'>Confirm</FormSubmitBtn>\n          <CloseInputFormBtn type='button' aria-label='hide comment controls' onClick={() => hideCommentBtnsWrapper()}/>\n        </FormBtnsWrapper>\n      }\n    </TaskPopupForm>\n  )\n}\n\nexport default TaskPopupCommentForm;\n\nconst TaskPopupForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`\n\nconst TaskCommentLabel = styled.label`\n  font-size: 0;\n`\n\nconst TaskCommentTextInput = styled.input`\n  margin-bottom: 10px;\n  padding: 5px;\n  width: 100%;\n  font-size: 18px;\n  border: none;\n  border-radius: 5px;\n  resize: none;\n  box-sizing: border-box;\n  background: Silver;\n`\n\nconst FormBtnsWrapper = styled.div`\n  margin-bottom: 15px;\n  display: flex;\n`\n\nconst FormSubmitBtn = styled.button`\n  margin-right: 10px;\n  padding: 4px 10px;\n  font-size: 16px;\n  color: white;\n  background-color: black;\n  text-transform: uppercase;\n  border: none;\n  border-radius: 5px;\n`\n\nconst CloseInputFormBtn = styled.button`\n  width: 28px;\n  height: 28px;\n  position: relative;\n  background-color: black;\n  border: none;\n  border-radius: 5px;\n\n  &::before {\n    content: '';\n    width: 25px;\n    height: 2px;\n    background-color: white;\n    position: absolute;\n    bottom: 13px;\n    left: 2px;\n    transform: rotate(-45deg);\n  }\n\n  &::after {\n    content: '';\n    width: 25px;\n    height: 2px;\n    background-color: white;\n    position: absolute;\n    top: 13px;\n    left: 2px;\n    transform: rotate(45deg);\n  }\n`","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { updateComment, removeComment } from '../../redux/actions';\nimport { selectUsername } from '../../redux/selectors';\nimport { Comment as CommentType } from '../../types';\n\ninterface CommentProps {\n  comment: CommentType\n}\n\nfunction Comment({\n  comment\n}: CommentProps) {\n  const username = useSelector(selectUsername);\n  const dispatch = useDispatch();\n  const [hasCommentClicked, setHasCommentClicked] = useState(false);\n  const [inputValue, setInputValue] = useState(comment.text);\n\n  function onClickShowCommentForm() {\n    setHasCommentClicked(true);\n    setInputValue(comment.text);\n  }\n\n  function onClickHideCommentForm() {\n    setHasCommentClicked(false);\n    setInputValue(comment.text);\n  }\n\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(e.target.value)\n  }\n\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch(updateComment(inputValue, comment.id));\n    setHasCommentClicked(false);\n  }\n\n  return (\n    <Root onClick={(e) => e.stopPropagation()}>\n      <Author>{comment.author}</Author>\n      {hasCommentClicked ?\n        (\n          <Form onSubmit={onSubmit}>\n            <Label>Change comment</Label>\n            <Input\n              name='changeComment' \n              placeholder='comment text' \n              autoComplete='off'\n              type='text' \n              id='changeComment'\n              value={inputValue}\n              onChange={onChange}\n            />\n            <BtnsWrapper>\n              <Button type='submit'>Confirm</Button>\n              <Button type='button' onClick={onClickHideCommentForm}>Cancel</Button>\n            </BtnsWrapper>\n          </Form>\n          )\n        :\n        (<>\n          <Text>{comment.text}</Text>\n          {username === comment.author && \n            <BtnsWrapper>\n              <Button type='button' onClick={onClickShowCommentForm}>change</Button>\n              <Button type='button' onClick={() => dispatch(removeComment(comment.id))}>delete</Button>\n            </BtnsWrapper>\n          }\n        </>)\n      }\n    </Root>\n  )\n}\n\nexport default Comment;\n\nconst Root = styled.li`\n  margin-bottom: 10px;\n`\n\nconst Author = styled.p`\n  margin-bottom: 5px;\n  font-size: 18px;\n  font-weight: 800;\n`\n\nconst Text = styled.p`\n  margin-bottom: 5px;\n  font-size: 16px;\n`\n\nconst BtnsWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n`\n\nconst Button = styled.button`\n  margin-right: 10px;\n  padding: 3px 5px;\n  font-size: 14px;\n  text-transform: uppercase;\n  color: white;\n  background-color: black;\n  border: none;\n  border-radius: 5px;\n`\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`\n\nconst Label = styled.label`\n  font-size: 0;\n`\n\nconst Input = styled.input`\n  margin-bottom: 5px;\n  padding: 3px;\n  width: 100%;\n  font-size: 16px;\n  border: 1px solid black;\n  border-radius: 5px;\n  resize: none;\n  box-sizing: border-box;\n`","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Task } from '../../types';\nimport TaskPopupDescriptionForm from '../TaskPopupDescriptionForm';\nimport TaskPopupCommentForm from '../TaskPopupCommentForm';\nimport Comment from '../Comment';\nimport { useSelector } from 'react-redux';\nimport { selectCommentsByTaskId } from '../../redux/selectors';\n\ninterface TaskPopupProps {\n  deskname: string,\n  task: Task,\n  onClickChangeTaskPopupVisibility: () => void,\n}\n\nfunction TaskPopup({\n  deskname, \n  task, \n  onClickChangeTaskPopupVisibility\n}: TaskPopupProps) {\n  const comments = useSelector(selectCommentsByTaskId(task.id));\n  const [hasTaskDescriptionClicked, setHasTaskDescriptionClicked] = useState(false);\n  const [hasCommentFormFocused, setHasCommentFormFocused] = useState(false);\n\n  useEffect(() => {\n    function handleWindowKeyPress(e: KeyboardEvent) {\n      if (e.key === 'Escape') {\n        onClickChangeTaskPopupVisibility();\n      }\n    }\n\n    window.addEventListener('keydown', handleWindowKeyPress);\n    return () => window.removeEventListener('keydown', handleWindowKeyPress);\n  }, [onClickChangeTaskPopupVisibility])\n\n  useEffect(() => {\n    function handleWindowClick(e: MouseEvent) {\n      setHasTaskDescriptionClicked(false);\n    }\n\n    window.addEventListener('click', handleWindowClick);\n\n    return () => window.removeEventListener('click', handleWindowClick);\n  }, [hasTaskDescriptionClicked]);\n\n  function onClickChangeTaskDescriptionFormVisibility() {\n    setHasTaskDescriptionClicked(prev => !prev);\n  }\n\n  function onFocusShowCommentBtnsWrapper() {\n    setHasCommentFormFocused(true);\n  }\n\n  function hideCommentBtnsWrapper() {\n    setHasCommentFormFocused(false);\n  }\n\n  function onClick(e: React.MouseEvent) {\n    const target = e.target as Element;\n\n    if (target.id === 'overlay' || target.id === 'hidePopupBtn') {\n      onClickChangeTaskPopupVisibility();\n    }\n\n    setHasCommentFormFocused(false);\n  }\n\n  function handleDescriptionClick(e: React.MouseEvent) {\n    e.stopPropagation();\n    onClickChangeTaskDescriptionFormVisibility();\n  }\n\n  return (\n    <TaskPopupOverlay id='overlay' onClick={onClick}>\n      <TaskPopupContainer>\n        <TaskPopupHeader>\n          <TaskName>{task.title}</TaskName>\n          <CloseTaskPopupBtn type='button' aria-label='hide task window' id='hidePopupBtn'/>\n        </TaskPopupHeader>\n        <DeskName>В доске: {deskname}</DeskName>\n        <TaskAuthor>Автор: {task.author}</TaskAuthor>\n        <TaskDescriptionHeader>Task description</TaskDescriptionHeader>\n        {hasTaskDescriptionClicked ?\n          (<TaskPopupDescriptionForm\n            onClickChangeTaskDescriptionFormVisibility={onClickChangeTaskDescriptionFormVisibility}\n            initialValue={task.description}\n            taskId={task.id}\n          />)\n          :\n          (<TaskDescription onClick={handleDescriptionClick}>{task.description? task.description : 'Add task description'}</TaskDescription>)\n        }\n        <TaskPopupCommentForm\n          taskId={task.id}\n          onFocusShowCommentBtnsWrapper={onFocusShowCommentBtnsWrapper}\n          hasCommentFormFocused={hasCommentFormFocused}\n          hideCommentBtnsWrapper={hideCommentBtnsWrapper}\n        />\n        <ul>\n          {comments.length >= 1 && comments.map((comment) => \n            <Comment \n              key={comment.id}\n              comment={comment}\n            />)\n          }\n        </ul>\n      </TaskPopupContainer>\n    </TaskPopupOverlay>\n  )\n}\n\nexport default TaskPopup;\n\nconst TaskPopupOverlay = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  background-color: rgba(255, 255, 255, 0.8);\n`\n\nconst TaskPopupContainer = styled.div`\n  padding: 20px;\n  width: 500px;\n  position: absolute;\n  z-index: 2;\n  top: 150px;\n  left: 50%;\n  transform: translateX(-50%);\n  border: 1px solid black;\n  border-radius: 10px;\n  background-color: white;\n`\n\nconst TaskPopupHeader = styled.div`\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: space-between;\n`\n\nconst TaskName = styled.h3`\n  font-size: 26px;\n  font-weight: 800;\n`\n\nconst CloseTaskPopupBtn = styled.button`\n  margin-top: 5px;\n  width: 20px;\n  height: 20px;\n  position: relative;\n  background-color: black;\n  border: none;\n  border-radius: 3px;\n\n  &::before {\n    content: '';\n    width: 15px;\n    height: 2px;\n    background-color: white;\n    position: absolute;\n    bottom: 9px;\n    left: 3px;\n    transform: rotate(-45deg);\n  }\n\n  &::after {\n    content: '';\n    width: 15px;\n    height: 2px;\n    background-color: white;\n    position: absolute;\n    top: 9px;\n    left: 3px;\n    transform: rotate(45deg);\n  }\n`\n\nconst DeskName = styled.p`\n  margin-bottom: 10px;\n  font-size: 20px;\n`\n\nconst TaskAuthor = styled.p`\n  margin-bottom: 10px;\n  font-size: 18px;\n`\n\nconst TaskDescriptionHeader = styled.label`\n  margin-bottom: 10px;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst TaskDescription = styled.p`\n  margin-bottom: 10px;\n  padding: 5px;\n  font-size: 18px;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  &:active {\n    opacity: 0.8;\n  }\n`","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { removeTask } from '../../redux/actions';\nimport { selectCommentsByTaskId } from '../../redux/selectors';\nimport { Task as TaskType } from '../../types';\nimport TaskPopup from '../TaskPopup';\n\ninterface TaskProps {\n  task: TaskType,\n  deskname: string\n}\n\nfunction Task({\n  task, \n  deskname\n}: TaskProps) {\n  const comments = useSelector(selectCommentsByTaskId(task.id));\n  const dispatch = useDispatch();\n  const [hasTaskClicked, setHasTaskClicked] = useState(false);\n\n  function onClick(e: React.MouseEvent<HTMLButtonElement>) {\n    e.stopPropagation();\n    dispatch(removeTask(task.id));\n  }\n\n  function onClickChangeTaskPopupVisibility() {\n    setHasTaskClicked(prev => !prev);\n  }\n\n  return (\n    <>\n      <Root onClick={onClickChangeTaskPopupVisibility}>\n        <Container>\n          <Text>{task.title}</Text>\n          <DeleteTaskButton aria-label='delete task' onClick={onClick}/>\n        </Container>\n        <CommentsCounter>comments: {comments.length}</CommentsCounter>\n      </Root>\n      {hasTaskClicked && <TaskPopup \n        deskname={deskname} \n        task={task}\n        onClickChangeTaskPopupVisibility={onClickChangeTaskPopupVisibility}\n      />}\n    </>\n  )\n}\n\nexport default Task;\n\nconst Root= styled.li`\n  margin-bottom: 10px;\n  cursor: pointer;\n`\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  border-bottom-right-radius: 3px;\n  border-bottom: 1px solid black;\n`\n\nconst Text = styled.p`\n  font-size: 18px;\n`\n\nconst DeleteTaskButton = styled.button`\n  width: 20px;\n  height: 20px;\n  position: relative;\n  background-color: black;\n  border: none;\n  border-radius: 3px;\n\n  &::before {\n    content: \"\";\n    width: 15px;\n    height: 2px;\n    background-color: white;\n    position: absolute;\n    bottom: 9px;\n    left: 3px;\n    transform: rotate(-45deg);\n  }\n\n  &::after {\n    content: \"\";\n    width: 15px;\n    height: 2px;\n    background-color: white;\n    position: absolute;\n    top: 9px;\n    left: 3px;\n    transform: rotate(45deg);\n  }\n`\n\nconst CommentsCounter = styled.p`\n  text-align: right;\n`","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { addNewTask, removeDesk } from '../../redux/actions';\nimport { selectTasksByDeskId, selectUsername } from '../../redux/selectors';\nimport ChangeHeaderForm from '../ChangeHeaderForm';\nimport Task from '../Task';\n\ninterface DeskProps {\n  title: string,\n  deskId: string\n}\n\nfunction Desk({\n  title, \n  deskId\n}: DeskProps) {\n  const username = useSelector(selectUsername);\n  const tasks = useSelector(selectTasksByDeskId(deskId));\n  const dispatch = useDispatch();\n  const [hasDeskHeaderClicked, setHasDeskHeaderClicked] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  function changeFormVisibility() {\n    setHasDeskHeaderClicked(prev => !prev);\n  }\n\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch(addNewTask(inputValue, deskId, username));\n    setInputValue('');\n  }\n\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(e.target.value);\n  }\n\n  function onBlurHideHeaderForm() {\n    setHasDeskHeaderClicked(false)\n  }\n\n  return (\n    <DeskContainer>\n      <DeskHeaderWrapper>\n        {hasDeskHeaderClicked? (\n          <ChangeHeaderForm \n            title={title} \n            deskId={deskId} \n            changeFormVisibility={changeFormVisibility}\n            onBlurHideHeaderForm={onBlurHideHeaderForm}\n          />\n          ) : (\n          <>\n            <DeskHeader onClick={() => setHasDeskHeaderClicked(true)}>{title}</DeskHeader>\n            <RemoveDeskButton type='button' onClick={() => {dispatch(removeDesk(deskId))}}>Remove desk</RemoveDeskButton>\n          </>\n        )}\n      </DeskHeaderWrapper>\n      <NewTaskForm onSubmit={onSubmit}>\n        <NewTaskLabel htmlFor='newTask'>New task</NewTaskLabel>\n        <NewTaskInput type='text' name='newTask' id='newTask' placeholder='New task' autoComplete='off' value={inputValue} onChange={onChange} required/>\n        <AddNewTaskButton type='submit'>Confirm</AddNewTaskButton>\n      </NewTaskForm>\n      <ul>\n        {tasks.map((task) => {\n            return (\n              <Task \n                key={task.id}\n                task={task} \n                deskname={title}\n              />)\n          })\n        }\n      </ul>\n    </DeskContainer>\n  )\n}\n\nexport default Desk;\n\nconst DeskContainer = styled.div`\n  margin-right: 7px;\n  margin-bottom: 20px;\n  padding: 10px;\n  min-width: 300px;\n  height: fit-content;\n  background-color: snow;\n  border: 2px solid black;\n  border-radius: 10px;\n\n  &:nth-child(4n) {\n    margin-right: 0;\n  }\n`\n\nconst DeskHeaderWrapper = styled.div`\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: flex-end;\n`\n\nconst DeskHeader = styled.h2`\n  margin-right: 25px;\n  font-size: 24px;\n  font-weight: 800;\n  text-align: center;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  &:active {\n    opacity: 0.8;\n  }\n`\n\nconst RemoveDeskButton = styled.button`\n  padding: 3px 5px;\n  font-size: 16px;\n  text-transform: uppercase;\n  color: white;\n  background-color: black;\n  border: none;\n  border-radius: 5px;\n`\n\nconst NewTaskForm = styled.form`\n  margin-bottom: 15px;\n  display: flex;\n  justify-content: space-between;\n`\n\nconst NewTaskLabel = styled.label`\n  font-size: 0;\n`\n\nconst NewTaskInput = styled.input`\n  margin-right: 10px;\n  font-size: 18px;\n  border-top: none;\n  border-right: none;\n  border-left: none;\n  border-image: initial;\n  border-bottom: 1px solid black;\n  background-color: transparent;\n`\n\nconst AddNewTaskButton = styled.button`\n  padding: 5px 20px;\n  font-size: 18px;\n  text-transform: uppercase;\n  color: white;\n  border: 1px solid black;\n  border-radius: 5px;\n  background-color: black;\n`","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './assets/css/normalize.css';\nimport './assets/css/reset.css';\nimport './assets/css/fonts.css';\nimport './assets/css/common.css';\nimport './styles.css';\nimport styled from 'styled-components';\nimport Autorization from './components/Authorization';\nimport Header from './components/Header';\nimport Desk from './components/Desk';\nimport { selectState } from './redux/selectors';\n\nfunction App() {\n  const state = useSelector(selectState);\n  const isAuthorized = Boolean(state.username);\n\n  useEffect(() => {\n    localStorage.setItem('state', JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <Container>\n      <HiddenHeader>Canban desk</HiddenHeader>\n      {isAuthorized ? (\n        <>\n          <Header />\n          <DesksContainer>\n            {state.desks.map((desk) => {\n              return (\n                <Desk \n                  key={desk.id}\n                  title={desk.title}\n                  deskId={desk.id}\n                />\n              )\n            })}\n          </DesksContainer>\n        </> \n      ) : (\n        <Autorization /> \n      )}\n    </Container>\n  )\n}\n\nexport default App;\n\nconst Container = styled.div`\n  margin: 0 auto;\n  width: 1424px;\n`\n\nconst HiddenHeader = styled.h1`\n  font-size: 0;\n`\n\nconst DesksContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`","import { State, Desk, Task, Comment } from './../types';\nimport { Action } from './types';\nimport { \n  SET_USERNAME, \n  ADD_NEW_DESK, \n  UPDATE_DESK_TITLE, \n  REMOVE_DESK, \n  REMOVE_ALL_DESKS, \n  ADD_NEW_TASK, \n  REMOVE_TASK, \n  UPDATE_TASK_DESCRIPTION, \n  ADD_NEW_COMMENT, \n  UPDATE_COMMENT, \n  REMOVE_COMMENT \n} from './types';\n\nconst initialStateJSON = localStorage.getItem('state');\nconst initialState:State = {username:'', desks: [], tasks: [], comments: []};\n\nexport const rootReducer = (state = initialStateJSON ? JSON.parse(initialStateJSON) : initialState, action: Action): State => {\n  switch (action.type) {\n    case SET_USERNAME:\n      return {...state, username: action.payload.username}\n    case ADD_NEW_DESK:\n      return {...state, desks: [...state.desks, action.payload]}\n    case UPDATE_DESK_TITLE:\n      return {...state, \n        desks: state.desks.map((desk: Desk) => {\n          if (desk.id === action.payload.id) {\n            return {...desk, title: action.payload.title};\n          }\n  \n          return desk;\n        })\n      }\n    case REMOVE_DESK: {\n      return {...state, desks: state.desks.filter((desk: Desk) => desk.id !== action.payload.deskId)}\n    }\n    case REMOVE_ALL_DESKS: \n      return initialState;\n    case ADD_NEW_TASK:\n      return {...state, tasks: [...state.tasks, action.payload]}\n    case REMOVE_TASK:\n      return {...state, tasks: state.tasks.filter((task: Task) => task.id !== action.payload.id)}\n    case UPDATE_TASK_DESCRIPTION:\n      return {...state,\n        tasks: state.tasks.map((task: Task) => {\n          if (task.id === action.payload.id) {\n            return {...task, description: action.payload.description};\n          }\n  \n          return task;\n        })\n      }\n    case ADD_NEW_COMMENT:\n      return {...state, comments: [...state.comments, action.payload]}\n    case UPDATE_COMMENT:\n      return {...state,\n        comments: state.comments.map((comment: Comment) => {\n          if (comment.id === action.payload.id) {\n            return {...comment, text: action.payload.text};\n          }\n  \n          return comment;\n        })\n      }\n    case REMOVE_COMMENT:\n      return {...state, comments: state.comments.filter((comment: Comment) => comment.id !== action.payload.id)}\n    default: return state;\n  }\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { rootReducer } from './redux/rootReducer';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}