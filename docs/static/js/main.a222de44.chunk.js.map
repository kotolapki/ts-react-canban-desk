{"version":3,"sources":["utils/getRandomId.js","components/Autorization/Autorization.tsx","components/Header/Header.tsx","components/ChangeHeaderForm/ChangeHeaderForm.tsx","components/TaskPopupDescriptionForm/TaskPopupDescriptionForm.tsx","components/TaskPopupCommentForm/TaskPopupCommentForm.tsx","components/CommentElement/CommentElement.tsx","components/TaskPopup/TaskPopup.tsx","components/TaskElement/TaskElement.tsx","components/Desk/Desk.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomId","numberOfDigits","Math","floor","random","toFixed","pow","Autorization","onSubmitHandler","useState","inputValue","setInputValue","Container","Form","action","method","onSubmit","e","preventDefault","Label","htmlFor","Input","type","name","id","autoComplete","placeholder","value","onChange","target","required","SubmitBtn","styled","div","form","label","input","button","Header","username","handleChangeAutorizationStatus","onClickRemoveAllDesks","AppHeader","WelcomeText","Button","onClick","NewDeskForm","currentTarget","reset","FormLabel","FormInput","RemoveDesksButton","header","p","ChangeHeaderForm","deskname","index","onSubmitChangeDeskHeader","changeFormVisibility","onBlurHideHeaderForm","textInput","useRef","useEffect","current","focus","HeaderForm","onBlur","ref","TaskPopupDescriptionForm","onSubmitChangeTaskDescription","onClickChangeTaskDescriptionFormVisibility","initialValue","deskIndex","taskIndex","changeTaskDescription","TaskPopupForm","stopPropagation","TaskInputLabel","TaskDescriptionInput","FormBtnsWrapper","FormSubmitBtn","CloseInputFormBtn","TaskPopupCommentForm","onSubmitAddNewComment","onFocusShowCommentBtnsWrapper","commentBtnsWrapperVisibility","hideCommentBtnsWrapper","TaskCommentLabel","TaskCommentTextInput","onFocus","aria-label","CommentElement","comment","commentIndex","onSubmitChangeComment","onClickDeleteComment","commentFormVisibility","setCommentFormVisibility","text","CommentsItem","CommentAuthor","author","ChangeCommentForm","ChangeCommentLabel","ChangeCommentInput","ChangeCommentBtnsWrapper","CommentBtn","CommentText","CommentBtnsWrapper","li","TaskPopup","task","onClickChangeTaskPopupVisibility","taskDescription","setTaskDescription","taskDescriptionFormVisibility","setTaskDescriptionFormVisibility","setCommentBtnsWrapperVisibility","prev","parsedDesks","JSON","parse","localStorage","getItem","tasks","description","handleWindowKeyPress","key","window","addEventListener","removeEventListener","handleWindowClick","TaskPopupOverlay","TaskPopupContainer","TaskPopupHeader","TaskName","title","CloseTaskPopupBtn","DeskName","TaskAuthor","TaskDescriptionHeader","TaskDescription","comments","length","map","h3","TaskElement","taskText","onClickRemoveTask","taskPopupVisibility","setTaskPopupVisibility","TaskItem","TaskText","DeleteTaskButton","CommentsCounter","Desk","desk","onClickRemoveDesk","onSubmitAddNewTask","changeHeaderFormVisibility","setChangeHeaderFormVisibility","DeskContainer","DeskHeaderWrapper","DeskHeader","RemoveDeskButton","NewTaskForm","NewTaskLabel","NewTaskInput","AddNewTaskButton","h2","App","autorizationStatus","setAutorizationStatus","setUsername","desks","setDesks","changedDesks","splice","setItem","stringify","newTask","push","newComment","HiddenHeader","newDesk","removeItem","DesksContainer","h1","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a222de44.chunk.js","sourcesContent":["function getRandomId (numberOfDigits=5) {\n  return Math.floor(Math.random().toFixed(numberOfDigits) * Math.pow(10, numberOfDigits));\n}\n\nexport default getRandomId;","import React, { ChangeEvent, FormEvent, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface AutorizationProps {\r\n  onSubmitHandler: (username: string) => (void);\r\n}\r\n\r\nfunction Autorization({onSubmitHandler}: AutorizationProps) {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function onSubmit(e: FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitHandler(inputValue);\r\n  }\r\n\r\n  function onChangeHandler(e: ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Form action='#' method='POST' onSubmit={onSubmit}>\r\n        <Label htmlFor='login'>Enter your name</Label>\r\n        <Input type='text' name='login' id='login' autoComplete='off' placeholder='Your name' value={inputValue} onChange={onChangeHandler} required/>\r\n        <SubmitBtn type='submit'>Confirm</SubmitBtn>\r\n      </Form>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Autorization;\r\n\r\nconst Container = styled.div`\r\n  padding: 30px 80px;\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  border: 2px solid black;\r\n  border-radius: 10px;\r\n`\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`\r\n\r\nconst Label = styled.label`\r\n  margin-bottom: 15px;\r\n  font-size: 36px;\r\n  font-weight: 300;\r\n`\r\n\r\nconst Input = styled.input`\r\n  margin-bottom: 15px;\r\n  padding: 5px;\r\n  font-size: 20px;\r\n  text-align: center;\r\n  border: none;\r\n  border-bottom: 1px solid black;\r\n`\r\n\r\nconst SubmitBtn = styled.button`\r\n  padding: 8px 15px;\r\n  font-size: 22px;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface HeaderProps {\r\n  username: string,\r\n  handleChangeAutorizationStatus: () => void,\r\n  onSubmit: (deskname: string) => void,\r\n  onClickRemoveAllDesks: () => void,\r\n}\r\n\r\nfunction Header({username, handleChangeAutorizationStatus, onSubmit, onClickRemoveAllDesks}: HeaderProps) {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function onSubmitHandler(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmit(inputValue);\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n  function onChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <AppHeader>\r\n      <WelcomeText>Hello, {username}!</WelcomeText>\r\n      <Button type='button' onClick={handleChangeAutorizationStatus}>Change user</Button>\r\n      <NewDeskForm action='#' method='POST' onSubmit={onSubmitHandler}>\r\n        <FormLabel htmlFor='deskname'>Enter new deskname</FormLabel>\r\n        <FormInput type='text' name='deskname' id='deskname' placeholder='Deskname' autoComplete='off' onChange={onChangeHandler} required/>\r\n        <Button type='submit'>Confirm</Button>\r\n      </NewDeskForm>\r\n      <RemoveDesksButton onClick={onClickRemoveAllDesks}>Remove all desks</RemoveDesksButton>\r\n    </AppHeader>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n\r\nconst AppHeader = styled.header`\r\n  margin-bottom: 30px;\r\n  padding-top: 40px;\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n\r\nconst WelcomeText = styled.p`\r\n  margin-right: 20px;\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`\r\n\r\nconst Button = styled.button`\r\n  margin-right: 20px;\r\n  padding: 3px 10px;\r\n  font-size: 20px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst RemoveDesksButton = styled(Button)`\r\n  margin-right: 0;\r\n`\r\n\r\nconst NewDeskForm = styled.form`\r\n  display: flex;\r\n  align-content: stretch;\r\n`\r\n\r\nconst FormLabel = styled.label`\r\n  margin-right: 15px;\r\n  font-size: 20px;\r\n  align-self: center;\r\n`\r\n\r\nconst FormInput = styled.input`\r\n  margin-right: 15px;\r\n  font-size: 20px;\r\n  border: none;\r\n  border-image: initial;\r\n  border-bottom: 1px solid black;\r\n`","import React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ChangeHeaderFormProps {\r\n  deskname: string,\r\n  index: number,\r\n  onSubmitChangeDeskHeader: (value: string, index: number) => void,\r\n  changeFormVisibility: () => void,\r\n  onBlurHideHeaderForm: () => void\r\n}\r\n\r\nfunction ChangeHeaderForm({deskname, index, onSubmitChangeDeskHeader, changeFormVisibility, onBlurHideHeaderForm}: ChangeHeaderFormProps) {\r\n  const [inputValue, setInputValue] = useState(deskname);\r\n  const textInput = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (textInput.current !== null) {\r\n      textInput.current.focus();\r\n    }\r\n  });\r\n\r\n  function onChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  function onSubmitHandler(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitChangeDeskHeader(inputValue, index);\r\n    changeFormVisibility();\r\n  }\r\n\r\n  return (\r\n    <HeaderForm action='#' method='POST' onSubmit={onSubmitHandler} onBlur={onBlurHideHeaderForm}>\r\n      <Label>Change deskname</Label>\r\n      <Input type='text' ref={textInput} name='deskname' id='deskname' placeholder={inputValue} value={inputValue} autoComplete='off' onChange={onChangeHandler} required/>\r\n    </HeaderForm>\r\n  )\r\n}\r\n\r\nexport default ChangeHeaderForm;\r\n\r\nconst HeaderForm = styled.form`\r\n  margin-bottom: 15px;\r\n  width: 100%;\r\n  display: flex;\r\n`\r\n\r\nconst Label = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst Input = styled.input`\r\n  margin: 0px auto 10px;\r\n  width: min-content;\r\n  text-align: center;\r\n  font-size: 24px;\r\n  font-weight: 800;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-bottom: 1px solid black;\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface TaskPopupDescriptionFormProps {\r\n  onSubmitChangeTaskDescription: (value: string, deskIndex: number, taskIndex: number) => void,\r\n  onClickChangeTaskDescriptionFormVisibility: () => void,\r\n  initialValue: string,\r\n  deskIndex: number,\r\n  taskIndex: number,\r\n  changeTaskDescription: (value: string) => void\r\n}\r\n\r\nfunction TaskPopupDescriptionForm({\r\n  onSubmitChangeTaskDescription, \r\n  onClickChangeTaskDescriptionFormVisibility, \r\n  initialValue, \r\n  deskIndex, \r\n  taskIndex,\r\n  changeTaskDescription}: TaskPopupDescriptionFormProps) {\r\n  const [inputValue, setInputValue] = useState(initialValue);\r\n  \r\n  function onSubmitHandler(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitChangeTaskDescription(inputValue, deskIndex, taskIndex);\r\n    onClickChangeTaskDescriptionFormVisibility();\r\n    changeTaskDescription(inputValue);\r\n  }\r\n\r\n  function onChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  function onClickHandler() {\r\n    onClickChangeTaskDescriptionFormVisibility();\r\n  }\r\n\r\n  return (\r\n    <TaskPopupForm action='#' method='POST' onSubmit={onSubmitHandler} onClick={(e) => e.stopPropagation()}>\r\n      <TaskInputLabel htmlFor='taskDescription'>Change description</TaskInputLabel>\r\n      <TaskDescriptionInput\r\n        name='taskDescription'\r\n        placeholder='Add task description' \r\n        autoComplete='off'\r\n        type='text' \r\n        id='taskDescription' \r\n        value={inputValue}\r\n        onChange={onChangeHandler}\r\n      />\r\n      <FormBtnsWrapper>\r\n        <FormSubmitBtn type='submit'>Confirm</FormSubmitBtn>\r\n        <CloseInputFormBtn type='button' onClick={onClickHandler}/>\r\n      </FormBtnsWrapper>\r\n    </TaskPopupForm>\r\n  )\r\n}\r\n\r\nexport default TaskPopupDescriptionForm;\r\n\r\nconst TaskPopupForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst TaskInputLabel = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst TaskDescriptionInput = styled.input`\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  width: 100%;\r\n  font-size: 18px;\r\n  border: 2px solid black;\r\n  border-radius: 5px;\r\n  resize: none;\r\n  outline: none;\r\n  box-sizing: border-box;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  &:active {\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst FormBtnsWrapper = styled.div`\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n`\r\n\r\nconst FormSubmitBtn = styled.button`\r\n  margin-right: 10px;\r\n  padding: 4px 10px;\r\n  font-size: 16px;\r\n  color: white;\r\n  background-color: black;\r\n  text-transform: uppercase;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst CloseInputFormBtn = styled.button`\r\n  width: 28px;\r\n  height: 28px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 13px;\r\n    left: 2px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 13px;\r\n    left: 2px;\r\n    transform: rotate(45deg);\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface TaskPopupCommentFormProps {\r\n  username: string,\r\n  deskIndex: number,\r\n  taskIndex: number,\r\n  onSubmitAddNewComment: (author: string, value: string, deskIndex: number, taskIndex: number) => void,\r\n  onFocusShowCommentBtnsWrapper: () => void,\r\n  commentBtnsWrapperVisibility: boolean,\r\n  hideCommentBtnsWrapper: () => void\r\n}\r\n\r\nfunction TaskPopupCommentForm({\r\n  username, \r\n  deskIndex, \r\n  taskIndex, \r\n  onSubmitAddNewComment, \r\n  onFocusShowCommentBtnsWrapper, \r\n  commentBtnsWrapperVisibility, \r\n  hideCommentBtnsWrapper\r\n}: TaskPopupCommentFormProps) {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function onSubmitHandler(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitAddNewComment(username, inputValue, deskIndex, taskIndex);\r\n    hideCommentBtnsWrapper();\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n  function onChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <TaskPopupForm action='#' method='POST' onSubmit={onSubmitHandler} onClick={e => e.stopPropagation()}>\r\n      <TaskCommentLabel htmlFor='comment'>Enter new comment</TaskCommentLabel>\r\n      <TaskCommentTextInput \r\n        name='comment' \r\n        placeholder='Add new comment' \r\n        autoComplete='off'\r\n        type='text' \r\n        id='comment' \r\n        onFocus={() => onFocusShowCommentBtnsWrapper()} \r\n        onChange={onChangeHandler}\r\n        required\r\n      />\r\n      {commentBtnsWrapperVisibility && \r\n        <FormBtnsWrapper>\r\n          <FormSubmitBtn type='submit'>Confirm</FormSubmitBtn>\r\n          <CloseInputFormBtn type='button' aria-label='hide comment controls' onClick={() => hideCommentBtnsWrapper()}/>\r\n        </FormBtnsWrapper>\r\n      }\r\n    </TaskPopupForm>\r\n  )\r\n}\r\n\r\nexport default TaskPopupCommentForm;\r\n\r\nconst TaskPopupForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst TaskCommentLabel = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst TaskCommentTextInput = styled.input`\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  width: 100%;\r\n  font-size: 18px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  resize: none;\r\n  box-sizing: border-box;\r\n  background: Silver;\r\n`\r\n\r\nconst FormBtnsWrapper = styled.div`\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n`\r\n\r\nconst FormSubmitBtn = styled.button`\r\n  margin-right: 10px;\r\n  padding: 4px 10px;\r\n  font-size: 16px;\r\n  color: white;\r\n  background-color: black;\r\n  text-transform: uppercase;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst CloseInputFormBtn = styled.button`\r\n  width: 28px;\r\n  height: 28px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 13px;\r\n    left: 2px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 13px;\r\n    left: 2px;\r\n    transform: rotate(45deg);\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport {Comment} from '../../App';\r\n\r\ninterface CommentProps {\r\n  comment: Comment,\r\n  username: string,\r\n  commentIndex: number,\r\n  deskIndex: number,\r\n  taskIndex: number,\r\n  onSubmitChangeComment: (value: string, deskIndex: number, taskIndex: number, commentIndex: number) => void,\r\n  onClickDeleteComment: (deskIndex: number, taskIndex: number, commentIndex: number) => void,\r\n  \r\n}\r\n\r\nfunction CommentElement({\r\n  comment, \r\n  username, \r\n  commentIndex, \r\n  deskIndex, \r\n  taskIndex, \r\n  onSubmitChangeComment, \r\n  onClickDeleteComment,\r\n}: CommentProps) {\r\n  const [commentFormVisibility, setCommentFormVisibility] = useState(false);\r\n  const [inputValue, setInputValue] = useState(comment.text);\r\n\r\n  function onClickShowCommentFormVisibility() {\r\n    setCommentFormVisibility(true);\r\n    setInputValue(comment.text);\r\n  }\r\n\r\n  function onClickHideCommentFormVisibility() {\r\n    setCommentFormVisibility(false);\r\n    setInputValue(comment.text);\r\n  }\r\n\r\n  function onChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  function onSubmitHandler(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitChangeComment(inputValue, deskIndex, taskIndex, commentIndex);\r\n    setCommentFormVisibility(false);\r\n  }\r\n\r\n  function onClickDeleteCommentHandler() {\r\n    onClickDeleteComment(deskIndex, taskIndex, commentIndex);\r\n  }\r\n\r\n  return (\r\n    <CommentsItem onClick={(e) => e.stopPropagation()}>\r\n      <CommentAuthor>{comment.author}</CommentAuthor>\r\n      {commentFormVisibility ?\r\n        (\r\n          <ChangeCommentForm action='#' method='POST' onSubmit={onSubmitHandler}>\r\n            <ChangeCommentLabel>Change comment</ChangeCommentLabel>\r\n            <ChangeCommentInput\r\n              name='changeComment' \r\n              placeholder='comment text' \r\n              autoComplete='off'\r\n              type='text' \r\n              id='changeComment'\r\n              value={inputValue}\r\n              onChange={onChangeHandler}\r\n            />\r\n            <ChangeCommentBtnsWrapper>\r\n              <CommentBtn type='submit'>Confirm</CommentBtn>\r\n              <CommentBtn type='button' onClick={onClickHideCommentFormVisibility}>Cancel</CommentBtn>\r\n            </ChangeCommentBtnsWrapper>\r\n          </ChangeCommentForm>\r\n          )\r\n        :\r\n        (<>\r\n          <CommentText>{comment.text}</CommentText>\r\n          {username === comment.author && \r\n            <CommentBtnsWrapper>\r\n              <CommentBtn type='button' onClick={onClickShowCommentFormVisibility}>change</CommentBtn>\r\n              <CommentBtn type='button' onClick={onClickDeleteCommentHandler}>delete</CommentBtn>\r\n            </CommentBtnsWrapper>\r\n          }\r\n        </>)\r\n      }\r\n    </CommentsItem>\r\n  )\r\n}\r\n\r\nexport default CommentElement;\r\n\r\nconst CommentsItem = styled.li`\r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst CommentAuthor = styled.p`\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n  font-weight: 800;\r\n`\r\n\r\nconst CommentText = styled.p`\r\n  margin-bottom: 5px;\r\n  font-size: 16px;\r\n`\r\n\r\nconst CommentBtnsWrapper = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst CommentBtn = styled.button`\r\n  margin-right: 10px;\r\n  padding: 3px 5px;\r\n  font-size: 14px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst ChangeCommentForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst ChangeCommentLabel = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst ChangeCommentInput = styled.input`\r\n  margin-bottom: 5px;\r\n  padding: 3px;\r\n  width: 100%;\r\n  font-size: 16px;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  resize: none;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst ChangeCommentBtnsWrapper = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n`","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Task } from '../../App';\r\nimport TaskPopupDescriptionForm from '../TaskPopupDescriptionForm';\r\nimport TaskPopupCommentForm from '../TaskPopupCommentForm';\r\nimport CommentElement from '../CommentElement';\r\n\r\ninterface TaskPopupProps {\r\n  username: string,\r\n  deskIndex: number,\r\n  taskIndex: number,\r\n  deskname: string,\r\n  task: Task,\r\n  onClickChangeTaskPopupVisibility: () => void,\r\n  onSubmitChangeTaskDescription: (value: string, deskIndex: number, taskIndex: number) => void,\r\n  onSubmitAddNewComment: (author: string, value: string, deskIndex: number, taskIndex: number) => void,\r\n  onSubmitChangeComment: (value: string, deskIndex: number, taskIndex: number, commentIndex: number) => void,\r\n  onClickDeleteComment: (deskIndex: number, taskIndex: number, commentIndex: number) => void\r\n}\r\n\r\nfunction TaskPopup({\r\n  username,\r\n  deskIndex, \r\n  taskIndex, \r\n  deskname, \r\n  task, \r\n  onClickChangeTaskPopupVisibility, \r\n  onSubmitChangeTaskDescription,\r\n  onSubmitAddNewComment,\r\n  onSubmitChangeComment,\r\n  onClickDeleteComment\r\n}: TaskPopupProps) {\r\n  const [taskDescription, setTaskDescription] = useState('Add task description');\r\n  const [taskDescriptionFormVisibility, setTaskDescriptionFormVisibility] = useState(false);\r\n  const [commentBtnsWrapperVisibility, setCommentBtnsWrapperVisibility] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const parsedDesks = JSON.parse(localStorage.getItem('desks')!);\r\n\r\n    if (parsedDesks[deskIndex].tasks[taskIndex].description) {\r\n      setTaskDescription(parsedDesks[deskIndex].tasks[taskIndex].description);\r\n    }\r\n  }, [deskIndex, taskIndex]);\r\n\r\n  useEffect(() => {\r\n    function handleWindowKeyPress(e: KeyboardEvent) {\r\n      if (e.key === 'Escape') {\r\n        onClickChangeTaskPopupVisibility();\r\n      }\r\n    }\r\n\r\n    window.addEventListener('keydown', handleWindowKeyPress);\r\n    return () => window.removeEventListener('keydown', handleWindowKeyPress);\r\n  }, [onClickChangeTaskPopupVisibility])\r\n\r\n  useEffect(() => {\r\n    function handleWindowClick(e: MouseEvent) {\r\n      setTaskDescriptionFormVisibility(false);\r\n    }\r\n\r\n    window.addEventListener('click', handleWindowClick);\r\n\r\n    return () => window.removeEventListener('click', handleWindowClick);\r\n  }, [setTaskDescriptionFormVisibility]);\r\n\r\n  function onClickChangeTaskDescriptionFormVisibility() {\r\n    setTaskDescriptionFormVisibility(prev => !prev);\r\n  }\r\n\r\n  function changeTaskDescription(value: string) {\r\n    setTaskDescription(value);\r\n  }\r\n\r\n  function onFocusShowCommentBtnsWrapper() {\r\n    setCommentBtnsWrapperVisibility(true);\r\n  }\r\n\r\n  function hideCommentBtnsWrapper() {\r\n    setCommentBtnsWrapperVisibility(false);\r\n  }\r\n\r\n  function popupClickHandler(e: React.MouseEvent) {\r\n    const target = e.target as Element;\r\n\r\n    if (target.id === 'overlay' || target.id === 'hidePopupBtn') {\r\n      onClickChangeTaskPopupVisibility();\r\n    }\r\n\r\n    setCommentBtnsWrapperVisibility(false);\r\n  }\r\n\r\n  function handleDescriptionClick(e) {\r\n    e.stopPropagation();\r\n    onClickChangeTaskDescriptionFormVisibility();\r\n  }\r\n\r\n  return (\r\n    <TaskPopupOverlay id='overlay' onClick={popupClickHandler}>\r\n      <TaskPopupContainer>\r\n        <TaskPopupHeader>\r\n          <TaskName>{task.title}</TaskName>\r\n          <CloseTaskPopupBtn type='button' aria-label='hide task window' id='hidePopupBtn'/>\r\n        </TaskPopupHeader>\r\n        <DeskName>В доске: {deskname}</DeskName>\r\n        <TaskAuthor>Автор: {task.author}</TaskAuthor>\r\n        <TaskDescriptionHeader>Task description</TaskDescriptionHeader>\r\n        {taskDescriptionFormVisibility ?\r\n          (<TaskPopupDescriptionForm\r\n            onSubmitChangeTaskDescription={onSubmitChangeTaskDescription}\r\n            onClickChangeTaskDescriptionFormVisibility={onClickChangeTaskDescriptionFormVisibility}\r\n            initialValue={taskDescription}\r\n            deskIndex={deskIndex}\r\n            taskIndex={taskIndex}\r\n            changeTaskDescription={changeTaskDescription}\r\n          />)\r\n          :\r\n          (<TaskDescription onClick={handleDescriptionClick}>{taskDescription}</TaskDescription>)\r\n        }\r\n        <TaskPopupCommentForm\r\n          username={username}\r\n          deskIndex={deskIndex}\r\n          taskIndex={taskIndex}\r\n          onSubmitAddNewComment={onSubmitAddNewComment}\r\n          onFocusShowCommentBtnsWrapper={onFocusShowCommentBtnsWrapper}\r\n          commentBtnsWrapperVisibility={commentBtnsWrapperVisibility}\r\n          hideCommentBtnsWrapper={hideCommentBtnsWrapper}\r\n        />\r\n        <ul>\r\n          {task.comments.length >= 1 && task.comments.map((comment, index) => \r\n            <CommentElement \r\n              key={index}\r\n              comment={comment}\r\n              username={username}\r\n              commentIndex={index}\r\n              deskIndex={deskIndex}\r\n              taskIndex={taskIndex}\r\n              onSubmitChangeComment={onSubmitChangeComment}\r\n              onClickDeleteComment={onClickDeleteComment}\r\n              \r\n            />)\r\n          }\r\n        </ul>\r\n      </TaskPopupContainer>\r\n    </TaskPopupOverlay>\r\n  )\r\n}\r\n\r\nexport default TaskPopup;\r\n\r\nconst TaskPopupOverlay = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n`\r\n\r\nconst TaskPopupContainer = styled.div`\r\n  padding: 20px;\r\n  width: 500px;\r\n  position: absolute;\r\n  z-index: 2;\r\n  top: 150px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  background-color: white;\r\n`\r\n\r\nconst TaskPopupHeader = styled.div`\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst TaskName = styled.h3`\r\n  font-size: 26px;\r\n  font-weight: 800;\r\n`\r\n\r\nconst CloseTaskPopupBtn = styled.button`\r\n  margin-top: 5px;\r\n  width: 20px;\r\n  height: 20px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 3px;\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 9px;\r\n    left: 3px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 9px;\r\n    left: 3px;\r\n    transform: rotate(45deg);\r\n  }\r\n`\r\n\r\nconst DeskName = styled.p`\r\n  margin-bottom: 10px;\r\n  font-size: 20px;\r\n`\r\n\r\nconst TaskAuthor = styled.p`\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n`\r\n\r\nconst TaskDescriptionHeader = styled.label`\r\n  margin-bottom: 10px;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n`\r\n\r\nconst TaskDescription = styled.p`\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 18px;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  &:active {\r\n    opacity: 0.8;\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Task } from '../../App';\r\nimport TaskPopup from '../TaskPopup';\r\n\r\ninterface TaskElementProps {\r\n  username: string,\r\n  task: Task,\r\n  deskname: string,\r\n  taskText: string,\r\n  deskIndex: number,\r\n  taskIndex: number,\r\n  onClickRemoveTask: (deskIndex: number, taskIndex: number) => void,\r\n  onSubmitChangeTaskDescription: (value: string, deskIndex: number, taskIndex: number) => void,\r\n  onSubmitAddNewComment: (author: string, value: string, deskIndex: number, taskIndex: number) => void,\r\n  onSubmitChangeComment: (value: string, deskIndex: number, taskIndex: number, commentIndex: number) => void,\r\n  onClickDeleteComment: (deskIndex: number, taskIndex: number, commentIndex: number) => void\r\n}\r\n\r\nfunction TaskElement({\r\n  username,\r\n  task, \r\n  deskname, \r\n  taskText, \r\n  deskIndex, \r\n  taskIndex, \r\n  onClickRemoveTask, \r\n  onSubmitChangeTaskDescription,\r\n  onSubmitAddNewComment,\r\n  onSubmitChangeComment,\r\n  onClickDeleteComment\r\n}: TaskElementProps) {\r\n  const [taskPopupVisibility, setTaskPopupVisibility] = useState(false);\r\n\r\n  function onClickHandler(e: React.MouseEvent<HTMLButtonElement>) {\r\n    e.stopPropagation();\r\n    onClickRemoveTask(deskIndex, taskIndex);\r\n  }\r\n\r\n  function onClickChangeTaskPopupVisibility() {\r\n    setTaskPopupVisibility(prev => !prev);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TaskItem onClick={onClickChangeTaskPopupVisibility}>\r\n        <Container>\r\n          <TaskText>{taskText}</TaskText>\r\n          <DeleteTaskButton aria-label='delete task' onClick={onClickHandler}/>\r\n        </Container>\r\n        <CommentsCounter>comments: {task.comments.length}</CommentsCounter>\r\n      </TaskItem>\r\n      {taskPopupVisibility && <TaskPopup \r\n        username={username}\r\n        deskIndex={deskIndex}\r\n        taskIndex={taskIndex}\r\n        deskname={deskname} \r\n        task={task} \r\n        onClickChangeTaskPopupVisibility={onClickChangeTaskPopupVisibility}\r\n        onSubmitChangeTaskDescription={onSubmitChangeTaskDescription}\r\n        onSubmitAddNewComment={onSubmitAddNewComment}\r\n        onSubmitChangeComment={onSubmitChangeComment}\r\n        onClickDeleteComment={onClickDeleteComment}\r\n      />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TaskElement;\r\n\r\nconst TaskItem = styled.li`\r\n  margin-bottom: 10px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-bottom-right-radius: 3px;\r\n  border-bottom: 1px solid black;\r\n`\r\n\r\nconst TaskText = styled.p`\r\n  font-size: 18px;\r\n`\r\n\r\nconst DeleteTaskButton = styled.button`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 3px;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 9px;\r\n    left: 3px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 9px;\r\n    left: 3px;\r\n    transform: rotate(45deg);\r\n  }\r\n`\r\n\r\nconst CommentsCounter = styled.p`\r\n  text-align: right;\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { TasksDesk } from '../../App';\r\nimport ChangeHeaderForm from '../ChangeHeaderForm';\r\nimport TaskElement from '../TaskElement';\r\n\r\ninterface DeskProps {\r\n  username: string,\r\n  desk: TasksDesk,\r\n  deskIndex: number,\r\n  onClickRemoveDesk: (index: number) => void,\r\n  onSubmitChangeDeskHeader: (value: string, index: number) => void,\r\n  onSubmitAddNewTask: (value: string, index: number, username: string) => void,\r\n  onClickRemoveTask: (deskIndex: number, taskIndex: number) => void,\r\n  onSubmitChangeTaskDescription: (value: string, deskIndex: number, taskIndex: number) => void,\r\n  onSubmitAddNewComment: (author: string, value: string, deskIndex: number, taskIndex: number) => void,\r\n  onSubmitChangeComment: (value: string, deskIndex: number, taskIndex: number, commentIndex: number) => void,\r\n  onClickDeleteComment: (deskIndex: number, taskIndex: number, commentIndex: number) => void\r\n}\r\n\r\nfunction Desk({\r\n  username, \r\n  desk:{title, tasks}, \r\n  deskIndex, \r\n  onClickRemoveDesk, \r\n  onSubmitChangeDeskHeader, \r\n  onSubmitAddNewTask, \r\n  onClickRemoveTask,\r\n  onSubmitChangeTaskDescription,\r\n  onSubmitAddNewComment,\r\n  onSubmitChangeComment,\r\n  onClickDeleteComment\r\n}: DeskProps) {\r\n  const [changeHeaderFormVisibility, setChangeHeaderFormVisibility] = useState(false);\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function changeFormVisibility() {\r\n    setChangeHeaderFormVisibility(prev => !prev);\r\n  }\r\n\r\n  function onSubmitHandler(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitAddNewTask(inputValue, deskIndex, username);\r\n    setInputValue('');\r\n  }\r\n\r\n  function onChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  function onBlurHideHeaderForm() {\r\n    setChangeHeaderFormVisibility(false)\r\n  }\r\n\r\n  return (\r\n    <DeskContainer>\r\n      <DeskHeaderWrapper>\r\n        {changeHeaderFormVisibility? (\r\n          <ChangeHeaderForm \r\n            deskname={title} \r\n            index={deskIndex} \r\n            onSubmitChangeDeskHeader={onSubmitChangeDeskHeader} \r\n            changeFormVisibility={changeFormVisibility}\r\n            onBlurHideHeaderForm={onBlurHideHeaderForm}\r\n          />\r\n          ) : (\r\n          <>\r\n            <DeskHeader onClick={() => setChangeHeaderFormVisibility(true)}>{title}</DeskHeader>\r\n            <RemoveDeskButton type='button' onClick={() => {onClickRemoveDesk(deskIndex)}}>Remove desk</RemoveDeskButton>\r\n          </>\r\n        )}\r\n      </DeskHeaderWrapper>\r\n      <NewTaskForm action='#' method='POST' onSubmit={onSubmitHandler}>\r\n        <NewTaskLabel htmlFor='newTask'>New task</NewTaskLabel>\r\n        <NewTaskInput type='text' name='newTask' id='newTask' placeholder='New task' autoComplete='off' value={inputValue} onChange={onChangeHandler} required/>\r\n        <AddNewTaskButton type='submit'>Confirm</AddNewTaskButton>\r\n      </NewTaskForm>\r\n      <ul>\r\n        {tasks.map((task, index) => {\r\n          return (\r\n            <TaskElement \r\n              key={task.id}\r\n              username={username} \r\n              task={task} \r\n              deskname={title} \r\n              taskText={task.title} \r\n              deskIndex={deskIndex} \r\n              taskIndex={index} \r\n              onClickRemoveTask={onClickRemoveTask}\r\n              onSubmitChangeTaskDescription={onSubmitChangeTaskDescription}\r\n              onSubmitAddNewComment={onSubmitAddNewComment}\r\n              onSubmitChangeComment={onSubmitChangeComment}\r\n              onClickDeleteComment={onClickDeleteComment}\r\n            />\r\n          )})\r\n        }\r\n      </ul>\r\n    </DeskContainer>\r\n  )\r\n}\r\n\r\nexport default Desk;\r\n\r\nconst DeskContainer = styled.div`\r\n  margin-right: 7px;\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  min-width: 300px;\r\n  height: fit-content;\r\n  background-color: snow;\r\n  border: 2px solid black;\r\n  border-radius: 10px;\r\n\r\n  &:nth-child(4n) {\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst DeskHeaderWrapper = styled.div`\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst DeskHeader = styled.h2`\r\n  margin-right: 25px;\r\n  font-size: 24px;\r\n  font-weight: 800;\r\n  text-align: center;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  &:active {\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst RemoveDeskButton = styled.button`\r\n  padding: 3px 5px;\r\n  font-size: 16px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst NewTaskForm = styled.form`\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst NewTaskLabel = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst NewTaskInput = styled.input`\r\n  margin-right: 10px;\r\n  font-size: 18px;\r\n  border-top: none;\r\n  border-right: none;\r\n  border-left: none;\r\n  border-image: initial;\r\n  border-bottom: 1px solid black;\r\n  background-color: transparent;\r\n`\r\n\r\nconst AddNewTaskButton = styled.button`\r\n  padding: 5px 20px;\r\n  font-size: 18px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  background-color: black;\r\n`","import React, { useState, useEffect } from 'react';\nimport './assets/css/normalize.css';\nimport './assets/css/reset.css';\nimport './assets/css/fonts.css';\nimport './assets/css/common.css';\nimport './styles.css';\nimport styled from 'styled-components';\nimport getRandomId from './utils/getRandomId';\nimport Autorization from './components/Autorization';\nimport Header from './components/Header';\nimport Desk from './components/Desk';\n\nexport interface Comment {\n  author: string,\n  text: string,\n  id: number\n}\nexport interface Task {\n  title: string,\n  id: number,\n  author: string,\n  description: string,\n  comments: Comment[]\n}\n\nexport interface TasksDesk {\n  title: string,\n  id: number,\n  tasks: Task[]\n}\n\nfunction App() {\n  const [autorizationStatus, setAutorizationStatus] = useState(false);\n  const [username, setUsername] = useState('');\n  const [desks, setDesks] = useState<TasksDesk[]>([]);\n\n  useEffect(() => {\n    if (localStorage.getItem('lastUser')) {\n      setUsername(localStorage.getItem('lastUser') || '');\n      setAutorizationStatus(true);\n    }\n\n    if (localStorage.getItem('desks')) {\n      const parsedDesks = JSON.parse(localStorage.getItem('desks') || '');\n      setDesks(parsedDesks);\n    }\n  }, []);\n\n  function handleChangeUser(username: string) {\n    localStorage.setItem('lastUser', username);\n    setAutorizationStatus(true);\n    setUsername(username);\n  }\n\n  function handleChangeAutorizationStatus() {\n    setAutorizationStatus(false);\n  }\n\n  function onSubmitAddNewDesk(deskname: string) {\n    const newDesk = {title: deskname, id: getRandomId(), tasks:[]};\n\n    if (localStorage.getItem('desks')) {\n      const parsedDesks = JSON.parse(localStorage.getItem('desks') || '');\n      parsedDesks.push(newDesk);\n      localStorage.setItem('desks', JSON.stringify(parsedDesks)); \n    } else {\n      const desks = [newDesk];\n      localStorage.setItem('desks', JSON.stringify(desks));\n    }\n\n    setDesks(prev => [...prev, newDesk]);\n  }\n\n  function onClickRemoveAllDesks() {\n    localStorage.removeItem('desks');\n    setDesks([]);\n  }\n\n  function onClickRemoveDesk(index: number) {\n    const changedDesks: TasksDesk[] = [...desks];\n    changedDesks.splice(index, 1);\n    localStorage.setItem('desks', JSON.stringify(changedDesks));\n    setDesks(changedDesks);\n  }\n\n  function onSubmitChangeDeskHeader(value: string, index: number) {\n    const changedDesks: TasksDesk[] = [...desks];\n    changedDesks[index]['title'] = value;\n    localStorage.setItem('desks', JSON.stringify(changedDesks));\n    setDesks(changedDesks);\n  }\n\n  function onSubmitAddNewTask(value: string, index: number, username: string) {\n    const newTask = {title: value, id: getRandomId(), description: '', author: username, comments: []};\n    const changedDesks: TasksDesk[] = [...desks];\n\n    if (changedDesks[index].tasks) {\n      changedDesks[index].tasks.push(newTask);\n    } else {\n      changedDesks[index].tasks = [newTask];\n    }\n    \n    localStorage.setItem('desks', JSON.stringify(changedDesks));\n    setDesks(changedDesks);\n  }\n\n  function onClickRemoveTask(deskIndex: number, taskIndex: number) {\n    const changedDesks: TasksDesk[] = [...desks];\n    changedDesks[deskIndex].tasks.splice(taskIndex, 1);\n    localStorage.setItem('desks', JSON.stringify(changedDesks));\n    setDesks(changedDesks);\n  }\n\n  function onSubmitChangeTaskDescription(value: string, deskIndex: number, taskIndex: number) {\n    const changedDesks: TasksDesk[] = [...desks];\n    changedDesks[deskIndex].tasks[taskIndex].description = value;\n    localStorage.setItem('desks', JSON.stringify(changedDesks));\n    setDesks(changedDesks);\n  }\n\n  function onSubmitAddNewComment(author: string, value: string, deskIndex: number, taskIndex: number) {\n    const newComment = {author: author, text: value, id: getRandomId()}\n    const changedDesks: TasksDesk[] = [...desks];\n    changedDesks[deskIndex].tasks[taskIndex].comments.push(newComment);\n    localStorage.setItem('desks', JSON.stringify(changedDesks));\n    setDesks(changedDesks);\n  }\n\n  function onSubmitChangeComment(value: string, deskIndex: number, taskIndex: number, commentIndex: number) {\n    const changedDesks: TasksDesk[] = [...desks];\n    changedDesks[deskIndex].tasks[taskIndex].comments[commentIndex].text = value;\n    localStorage.setItem('desks', JSON.stringify(changedDesks));\n    setDesks(changedDesks);\n  }\n\n  function onClickDeleteComment(deskIndex: number, taskIndex: number, commentIndex: number) {\n    const changedDesks: TasksDesk[] = [...desks];\n    changedDesks[deskIndex].tasks[taskIndex].comments.splice(commentIndex, 1);\n    localStorage.setItem('desks', JSON.stringify(changedDesks));\n    setDesks(changedDesks);\n  }\n\n  return (\n    <Container>\n      <HiddenHeader>Canban desk</HiddenHeader>\n      {autorizationStatus ? (\n        <>\n          <Header \n            username={username} \n            handleChangeAutorizationStatus={handleChangeAutorizationStatus} \n            onSubmit={onSubmitAddNewDesk}\n            onClickRemoveAllDesks={onClickRemoveAllDesks}\n          />\n          <DesksContainer>\n            {desks.map((desk, index) => {\n              return (\n                <Desk \n                  key={desk.id} \n                  username={username}\n                  desk={desk}\n                  deskIndex={index} \n                  onClickRemoveDesk={onClickRemoveDesk} \n                  onSubmitChangeDeskHeader={onSubmitChangeDeskHeader}\n                  onSubmitAddNewTask={onSubmitAddNewTask}\n                  onClickRemoveTask={onClickRemoveTask}\n                  onSubmitChangeTaskDescription={onSubmitChangeTaskDescription}\n                  onSubmitAddNewComment={onSubmitAddNewComment}\n                  onSubmitChangeComment={onSubmitChangeComment}\n                  onClickDeleteComment={onClickDeleteComment}\n                />\n              )\n            })}\n          </DesksContainer>\n        </> \n      ) : (\n        <Autorization onSubmitHandler={handleChangeUser}/> \n      )}\n    </Container>\n  )\n}\n\nexport default App;\n\nconst Container = styled.div`\n  margin: 0 auto;\n  width: 1424px;\n`\n\nconst HiddenHeader = styled.h1`\n  font-size: 0;\n`\n\nconst DesksContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}