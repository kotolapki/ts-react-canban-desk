{"version":3,"sources":["components/Autorization/Autorization.tsx","components/Header/Header.tsx","components/ChangeHeaderForm/ChangeHeaderForm.tsx","components/TaskPopupDescriptionForm/TaskPopupDescriptionForm.tsx","components/TaskPopupCommentForm/TaskPopupCommentForm.tsx","components/Comment/Comment.tsx","components/TaskPopup/TaskPopup.tsx","components/Task/Task.tsx","components/Desk/Desk.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Autorization","handleChangeUser","useState","inputValue","setInputValue","Container","Form","onSubmit","e","preventDefault","Label","htmlFor","Input","type","name","id","autoComplete","placeholder","value","onChange","target","required","SubmitBtn","styled","div","form","label","input","button","Header","username","handleSignOut","onSubmitAddNewDesk","onClickRemoveAllDesks","AppHeader","WelcomeText","Button","onClick","NewDeskForm","currentTarget","reset","FormLabel","FormInput","RemoveDesksButton","header","p","ChangeHeaderForm","deskname","deskId","updateDeskTitle","changeFormVisibility","onBlurHideHeaderForm","textInput","useRef","useEffect","current","focus","HeaderForm","onBlur","ref","TaskPopupDescriptionForm","onSubmitChangeTaskDescription","onClickChangeTaskDescriptionFormVisibility","initialValue","taskId","TaskPopupForm","stopPropagation","TaskInputLabel","TaskDescriptionInput","FormBtnsWrapper","FormSubmitBtn","CloseInputFormBtn","TaskPopupCommentForm","onSubmitAddNewComment","onFocusShowCommentBtnsWrapper","hasCommentFormFocused","hideCommentBtnsWrapper","TaskCommentLabel","TaskCommentTextInput","onFocus","aria-label","Comment","comment","onSubmitChangeComment","onClickDeleteComment","hasCommentClicked","setHasCommentClicked","text","Root","Author","author","BtnsWrapper","Text","li","TaskPopup","task","comments","onClickChangeTaskPopupVisibility","hasTaskDescriptionClicked","setHasTaskDescriptionClicked","setHasCommentFormFocused","prev","handleWindowKeyPress","key","window","addEventListener","removeEventListener","handleWindowClick","TaskPopupOverlay","TaskPopupContainer","TaskPopupHeader","TaskName","title","CloseTaskPopupBtn","DeskName","TaskAuthor","TaskDescriptionHeader","description","TaskDescription","length","map","h3","Task","onClickRemoveTask","hasTaskClicked","setHasTaskClicked","DeleteTaskButton","CommentsCounter","Desk","tasks","onClickRemoveDesk","onSubmitAddNewTask","hasDeskHeaderClicked","setHasDeskHeaderClicked","DeskContainer","DeskHeaderWrapper","DeskHeader","RemoveDeskButton","NewTaskForm","NewTaskLabel","NewTaskInput","AddNewTaskButton","filter","h2","initialUsername","localStorage","getItem","initialStateJSON","initialState","desks","App","setUsername","JSON","parse","state","setState","isAuthorized","Boolean","desk","newTask","uuidv4","newComment","setItem","stringify","HiddenHeader","newDesk","DesksContainer","h1","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9f47643.chunk.js","sourcesContent":["import React, { ChangeEvent, FormEvent, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface AutorizationProps {\r\n  handleChangeUser: (username: string) => (void);\r\n}\r\n\r\nfunction Autorization({handleChangeUser}: AutorizationProps) {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function onSubmit(e: FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    handleChangeUser(inputValue);\r\n  }\r\n\r\n  function onChange(e: ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Form onSubmit={onSubmit}>\r\n        <Label htmlFor='login'>Enter your name</Label>\r\n        <Input type='text' name='login' id='login' autoComplete='off' placeholder='Your name' value={inputValue} onChange={onChange} required/>\r\n        <SubmitBtn type='submit'>Confirm</SubmitBtn>\r\n      </Form>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Autorization;\r\n\r\nconst Container = styled.div`\r\n  padding: 30px 80px;\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  border: 2px solid black;\r\n  border-radius: 10px;\r\n`\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`\r\n\r\nconst Label = styled.label`\r\n  margin-bottom: 15px;\r\n  font-size: 36px;\r\n  font-weight: 300;\r\n`\r\n\r\nconst Input = styled.input`\r\n  margin-bottom: 15px;\r\n  padding: 5px;\r\n  font-size: 20px;\r\n  text-align: center;\r\n  border: none;\r\n  border-bottom: 1px solid black;\r\n`\r\n\r\nconst SubmitBtn = styled.button`\r\n  padding: 8px 15px;\r\n  font-size: 22px;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface HeaderProps {\r\n  username: string,\r\n  handleSignOut: () => void,\r\n  onSubmitAddNewDesk: (deskname: string) => void,\r\n  onClickRemoveAllDesks: () => void,\r\n}\r\n\r\nfunction Header({username, handleSignOut, onSubmitAddNewDesk, onClickRemoveAllDesks}: HeaderProps) {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitAddNewDesk(inputValue);\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <AppHeader>\r\n      <WelcomeText>Hello, {username}!</WelcomeText>\r\n      <Button type='button' onClick={handleSignOut}>Change user</Button>\r\n      <NewDeskForm onSubmit={onSubmit}>\r\n        <FormLabel htmlFor='deskname'>Enter new deskname</FormLabel>\r\n        <FormInput type='text' name='deskname' id='deskname' placeholder='Deskname' autoComplete='off' onChange={onChange} required/>\r\n        <Button type='submit'>Confirm</Button>\r\n      </NewDeskForm>\r\n      <RemoveDesksButton onClick={onClickRemoveAllDesks}>Remove all desks</RemoveDesksButton>\r\n    </AppHeader>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n\r\nconst AppHeader = styled.header`\r\n  margin-bottom: 30px;\r\n  padding-top: 40px;\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n\r\nconst WelcomeText = styled.p`\r\n  margin-right: 20px;\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`\r\n\r\nconst Button = styled.button`\r\n  margin-right: 20px;\r\n  padding: 3px 10px;\r\n  font-size: 20px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst RemoveDesksButton = styled(Button)`\r\n  margin-right: 0;\r\n`\r\n\r\nconst NewDeskForm = styled.form`\r\n  display: flex;\r\n  align-content: stretch;\r\n`\r\n\r\nconst FormLabel = styled.label`\r\n  margin-right: 15px;\r\n  font-size: 20px;\r\n  align-self: center;\r\n`\r\n\r\nconst FormInput = styled.input`\r\n  margin-right: 15px;\r\n  font-size: 20px;\r\n  border: none;\r\n  border-image: initial;\r\n  border-bottom: 1px solid black;\r\n`","import React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface Props {\r\n  deskname: string,\r\n  deskId: string,\r\n  updateDeskTitle: (title: string, id: string) => void,\r\n  changeFormVisibility: () => void,\r\n  onBlurHideHeaderForm: () => void\r\n}\r\n\r\nfunction ChangeHeaderForm({deskname, deskId, updateDeskTitle, changeFormVisibility, onBlurHideHeaderForm}: Props) {\r\n  const [inputValue, setInputValue] = useState(deskname);\r\n  const textInput = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (textInput.current !== null) {\r\n      textInput.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    updateDeskTitle(inputValue, deskId);\r\n    changeFormVisibility();\r\n  }\r\n\r\n  return (\r\n    <HeaderForm onSubmit={onSubmit} onBlur={onBlurHideHeaderForm}>\r\n      <Label>Change deskname</Label>\r\n      <Input type='text' ref={textInput} name='deskname' id='deskname' placeholder={inputValue} value={inputValue} autoComplete='off' onChange={onChange} required/>\r\n    </HeaderForm>\r\n  )\r\n}\r\n\r\nexport default ChangeHeaderForm;\r\n\r\nconst HeaderForm = styled.form`\r\n  margin-bottom: 15px;\r\n  width: 100%;\r\n  display: flex;\r\n`\r\n\r\nconst Label = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst Input = styled.input`\r\n  margin: 0px auto 10px;\r\n  width: min-content;\r\n  text-align: center;\r\n  font-size: 24px;\r\n  font-weight: 800;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-bottom: 1px solid black;\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface TaskPopupDescriptionFormProps {\r\n  onSubmitChangeTaskDescription: (description: string, id: string) => void,\r\n  onClickChangeTaskDescriptionFormVisibility: () => void,\r\n  initialValue: string,\r\n  taskId: string\r\n}\r\n\r\nfunction TaskPopupDescriptionForm({\r\n  onSubmitChangeTaskDescription, \r\n  onClickChangeTaskDescriptionFormVisibility, \r\n  initialValue,\r\n  taskId}: TaskPopupDescriptionFormProps) {\r\n  const [inputValue, setInputValue] = useState(initialValue);\r\n  \r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitChangeTaskDescription(inputValue, taskId);\r\n    onClickChangeTaskDescriptionFormVisibility();\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  function onClick() {\r\n    onClickChangeTaskDescriptionFormVisibility();\r\n  }\r\n\r\n  return (\r\n    <TaskPopupForm onSubmit={onSubmit} onClick={(e) => e.stopPropagation()}>\r\n      <TaskInputLabel htmlFor='taskDescription'>Change description</TaskInputLabel>\r\n      <TaskDescriptionInput\r\n        name='taskDescription'\r\n        placeholder='Add task description' \r\n        autoComplete='off'\r\n        type='text' \r\n        id='taskDescription' \r\n        value={inputValue}\r\n        onChange={onChange}\r\n      />\r\n      <FormBtnsWrapper>\r\n        <FormSubmitBtn type='submit'>Confirm</FormSubmitBtn>\r\n        <CloseInputFormBtn type='button' onClick={onClick}/>\r\n      </FormBtnsWrapper>\r\n    </TaskPopupForm>\r\n  )\r\n}\r\n\r\nexport default TaskPopupDescriptionForm;\r\n\r\nconst TaskPopupForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst TaskInputLabel = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst TaskDescriptionInput = styled.input`\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  width: 100%;\r\n  font-size: 18px;\r\n  border: 2px solid black;\r\n  border-radius: 5px;\r\n  resize: none;\r\n  outline: none;\r\n  box-sizing: border-box;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  &:active {\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst FormBtnsWrapper = styled.div`\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n`\r\n\r\nconst FormSubmitBtn = styled.button`\r\n  margin-right: 10px;\r\n  padding: 4px 10px;\r\n  font-size: 16px;\r\n  color: white;\r\n  background-color: black;\r\n  text-transform: uppercase;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst CloseInputFormBtn = styled.button`\r\n  width: 28px;\r\n  height: 28px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 13px;\r\n    left: 2px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 13px;\r\n    left: 2px;\r\n    transform: rotate(45deg);\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface TaskPopupCommentFormProps {\r\n  username: string,\r\n  taskId: string,\r\n  onSubmitAddNewComment: (author: string, text: string, id: string) => void,\r\n  onFocusShowCommentBtnsWrapper: () => void,\r\n  hasCommentFormFocused: boolean,\r\n  hideCommentBtnsWrapper: () => void\r\n}\r\n\r\nfunction TaskPopupCommentForm({\r\n  username, \r\n  taskId, \r\n  onSubmitAddNewComment, \r\n  onFocusShowCommentBtnsWrapper, \r\n  hasCommentFormFocused, \r\n  hideCommentBtnsWrapper\r\n}: TaskPopupCommentFormProps) {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitAddNewComment(username, inputValue, taskId);\r\n    hideCommentBtnsWrapper();\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <TaskPopupForm onSubmit={onSubmit} onClick={e => e.stopPropagation()}>\r\n      <TaskCommentLabel htmlFor='comment'>Enter new comment</TaskCommentLabel>\r\n      <TaskCommentTextInput \r\n        name='comment' \r\n        placeholder='Add new comment' \r\n        autoComplete='off'\r\n        type='text' \r\n        id='comment' \r\n        onFocus={() => onFocusShowCommentBtnsWrapper()} \r\n        onChange={onChange}\r\n        required\r\n      />\r\n      {hasCommentFormFocused && \r\n        <FormBtnsWrapper>\r\n          <FormSubmitBtn type='submit'>Confirm</FormSubmitBtn>\r\n          <CloseInputFormBtn type='button' aria-label='hide comment controls' onClick={() => hideCommentBtnsWrapper()}/>\r\n        </FormBtnsWrapper>\r\n      }\r\n    </TaskPopupForm>\r\n  )\r\n}\r\n\r\nexport default TaskPopupCommentForm;\r\n\r\nconst TaskPopupForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst TaskCommentLabel = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst TaskCommentTextInput = styled.input`\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  width: 100%;\r\n  font-size: 18px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  resize: none;\r\n  box-sizing: border-box;\r\n  background: Silver;\r\n`\r\n\r\nconst FormBtnsWrapper = styled.div`\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n`\r\n\r\nconst FormSubmitBtn = styled.button`\r\n  margin-right: 10px;\r\n  padding: 4px 10px;\r\n  font-size: 16px;\r\n  color: white;\r\n  background-color: black;\r\n  text-transform: uppercase;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst CloseInputFormBtn = styled.button`\r\n  width: 28px;\r\n  height: 28px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 13px;\r\n    left: 2px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 13px;\r\n    left: 2px;\r\n    transform: rotate(45deg);\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Comment as CommentType } from '../../types';\r\n\r\ninterface CommentProps {\r\n  comment: CommentType,\r\n  username: string,\r\n  onSubmitChangeComment: (text: string, id: string) => void,\r\n  onClickDeleteComment: (id: string) => void\r\n}\r\n\r\nfunction Comment({\r\n  comment, \r\n  username, \r\n  onSubmitChangeComment, \r\n  onClickDeleteComment,\r\n}: CommentProps) {\r\n  const [hasCommentClicked, setHasCommentClicked] = useState(false);\r\n  const [inputValue, setInputValue] = useState(comment.text);\r\n\r\n  function onClickShowCommentForm() {\r\n    setHasCommentClicked(true);\r\n    setInputValue(comment.text);\r\n  }\r\n\r\n  function onClickHideCommentForm() {\r\n    setHasCommentClicked(false);\r\n    setInputValue(comment.text);\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitChangeComment(inputValue, comment.id);\r\n    setHasCommentClicked(false);\r\n  }\r\n\r\n  return (\r\n    <Root onClick={(e) => e.stopPropagation()}>\r\n      <Author>{comment.author}</Author>\r\n      {hasCommentClicked ?\r\n        (\r\n          <Form onSubmit={onSubmit}>\r\n            <Label>Change comment</Label>\r\n            <Input\r\n              name='changeComment' \r\n              placeholder='comment text' \r\n              autoComplete='off'\r\n              type='text' \r\n              id='changeComment'\r\n              value={inputValue}\r\n              onChange={onChange}\r\n            />\r\n            <BtnsWrapper>\r\n              <Button type='submit'>Confirm</Button>\r\n              <Button type='button' onClick={onClickHideCommentForm}>Cancel</Button>\r\n            </BtnsWrapper>\r\n          </Form>\r\n          )\r\n        :\r\n        (<>\r\n          <Text>{comment.text}</Text>\r\n          {username === comment.author && \r\n            <BtnsWrapper>\r\n              <Button type='button' onClick={onClickShowCommentForm}>change</Button>\r\n              <Button type='button' onClick={() => onClickDeleteComment(comment.id)}>delete</Button>\r\n            </BtnsWrapper>\r\n          }\r\n        </>)\r\n      }\r\n    </Root>\r\n  )\r\n}\r\n\r\nexport default Comment;\r\n\r\nconst Root = styled.li`\r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst Author = styled.p`\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n  font-weight: 800;\r\n`\r\n\r\nconst Text = styled.p`\r\n  margin-bottom: 5px;\r\n  font-size: 16px;\r\n`\r\n\r\nconst BtnsWrapper = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst Button = styled.button`\r\n  margin-right: 10px;\r\n  padding: 3px 5px;\r\n  font-size: 14px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst Label = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst Input = styled.input`\r\n  margin-bottom: 5px;\r\n  padding: 3px;\r\n  width: 100%;\r\n  font-size: 16px;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  resize: none;\r\n  box-sizing: border-box;\r\n`","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Task, Comment as CommentType } from '../../types';\r\nimport TaskPopupDescriptionForm from '../TaskPopupDescriptionForm';\r\nimport TaskPopupCommentForm from '../TaskPopupCommentForm';\r\nimport Comment from '../Comment';\r\n\r\ninterface TaskPopupProps {\r\n  username: string,\r\n  deskname: string,\r\n  task: Task,\r\n  comments: CommentType[],\r\n  onClickChangeTaskPopupVisibility: () => void,\r\n  onSubmitChangeTaskDescription: (description: string, id: string) => void,\r\n  onSubmitAddNewComment: (author: string, text: string, id: string) => void,\r\n  onSubmitChangeComment: (text: string, id: string) => void,\r\n  onClickDeleteComment: (id: string) => void\r\n}\r\n\r\nfunction TaskPopup({\r\n  username, \r\n  deskname, \r\n  task, \r\n  comments,\r\n  onClickChangeTaskPopupVisibility, \r\n  onSubmitChangeTaskDescription,\r\n  onSubmitAddNewComment,\r\n  onSubmitChangeComment,\r\n  onClickDeleteComment\r\n}: TaskPopupProps) {\r\n  const [hasTaskDescriptionClicked, setHasTaskDescriptionClicked] = useState(false);\r\n  const [hasCommentFormFocused, setHasCommentFormFocused] = useState(false);\r\n\r\n  useEffect(() => {\r\n    function handleWindowKeyPress(e: KeyboardEvent) {\r\n      if (e.key === 'Escape') {\r\n        onClickChangeTaskPopupVisibility();\r\n      }\r\n    }\r\n\r\n    window.addEventListener('keydown', handleWindowKeyPress);\r\n    return () => window.removeEventListener('keydown', handleWindowKeyPress);\r\n  }, [onClickChangeTaskPopupVisibility])\r\n\r\n  useEffect(() => {\r\n    function handleWindowClick(e: MouseEvent) {\r\n      setHasTaskDescriptionClicked(false);\r\n    }\r\n\r\n    window.addEventListener('click', handleWindowClick);\r\n\r\n    return () => window.removeEventListener('click', handleWindowClick);\r\n  }, [hasTaskDescriptionClicked]);\r\n\r\n  function onClickChangeTaskDescriptionFormVisibility() {\r\n    setHasTaskDescriptionClicked(prev => !prev);\r\n  }\r\n\r\n  function onFocusShowCommentBtnsWrapper() {\r\n    setHasCommentFormFocused(true);\r\n  }\r\n\r\n  function hideCommentBtnsWrapper() {\r\n    setHasCommentFormFocused(false);\r\n  }\r\n\r\n  function onClick(e: React.MouseEvent) {\r\n    const target = e.target as Element;\r\n\r\n    if (target.id === 'overlay' || target.id === 'hidePopupBtn') {\r\n      onClickChangeTaskPopupVisibility();\r\n    }\r\n\r\n    setHasCommentFormFocused(false);\r\n  }\r\n\r\n  function handleDescriptionClick(e) {\r\n    e.stopPropagation();\r\n    onClickChangeTaskDescriptionFormVisibility();\r\n  }\r\n\r\n  return (\r\n    <TaskPopupOverlay id='overlay' onClick={onClick}>\r\n      <TaskPopupContainer>\r\n        <TaskPopupHeader>\r\n          <TaskName>{task.title}</TaskName>\r\n          <CloseTaskPopupBtn type='button' aria-label='hide task window' id='hidePopupBtn'/>\r\n        </TaskPopupHeader>\r\n        <DeskName>В доске: {deskname}</DeskName>\r\n        <TaskAuthor>Автор: {task.author}</TaskAuthor>\r\n        <TaskDescriptionHeader>Task description</TaskDescriptionHeader>\r\n        {hasTaskDescriptionClicked ?\r\n          (<TaskPopupDescriptionForm\r\n            onSubmitChangeTaskDescription={onSubmitChangeTaskDescription}\r\n            onClickChangeTaskDescriptionFormVisibility={onClickChangeTaskDescriptionFormVisibility}\r\n            initialValue={task.description}\r\n            taskId={task.id}\r\n          />)\r\n          :\r\n          (<TaskDescription onClick={handleDescriptionClick}>{task.description? task.description : 'Add task description'}</TaskDescription>)\r\n        }\r\n        <TaskPopupCommentForm\r\n          username={username}\r\n          taskId={task.id}\r\n          onSubmitAddNewComment={onSubmitAddNewComment}\r\n          onFocusShowCommentBtnsWrapper={onFocusShowCommentBtnsWrapper}\r\n          hasCommentFormFocused={hasCommentFormFocused}\r\n          hideCommentBtnsWrapper={hideCommentBtnsWrapper}\r\n        />\r\n        <ul>\r\n          {comments.length >= 1 && comments.map((comment) => \r\n            <Comment \r\n              key={comment.id}\r\n              comment={comment}\r\n              username={username}\r\n              onSubmitChangeComment={onSubmitChangeComment}\r\n              onClickDeleteComment={onClickDeleteComment}\r\n            />)\r\n          }\r\n        </ul>\r\n      </TaskPopupContainer>\r\n    </TaskPopupOverlay>\r\n  )\r\n}\r\n\r\nexport default TaskPopup;\r\n\r\nconst TaskPopupOverlay = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n`\r\n\r\nconst TaskPopupContainer = styled.div`\r\n  padding: 20px;\r\n  width: 500px;\r\n  position: absolute;\r\n  z-index: 2;\r\n  top: 150px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  background-color: white;\r\n`\r\n\r\nconst TaskPopupHeader = styled.div`\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst TaskName = styled.h3`\r\n  font-size: 26px;\r\n  font-weight: 800;\r\n`\r\n\r\nconst CloseTaskPopupBtn = styled.button`\r\n  margin-top: 5px;\r\n  width: 20px;\r\n  height: 20px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 3px;\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 9px;\r\n    left: 3px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 9px;\r\n    left: 3px;\r\n    transform: rotate(45deg);\r\n  }\r\n`\r\n\r\nconst DeskName = styled.p`\r\n  margin-bottom: 10px;\r\n  font-size: 20px;\r\n`\r\n\r\nconst TaskAuthor = styled.p`\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n`\r\n\r\nconst TaskDescriptionHeader = styled.label`\r\n  margin-bottom: 10px;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n`\r\n\r\nconst TaskDescription = styled.p`\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 18px;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  &:active {\r\n    opacity: 0.8;\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Task as TaskType, Comment} from '../../types';\r\nimport TaskPopup from '../TaskPopup';\r\n\r\ninterface TaskProps {\r\n  username: string,\r\n  task: TaskType,\r\n  deskname: string,\r\n  comments: Comment[],\r\n  onClickRemoveTask: (id: string) => void,\r\n  onSubmitChangeTaskDescription: (description: string, id: string) => void,\r\n  onSubmitAddNewComment: (author: string, text: string, id: string) => void,\r\n  onSubmitChangeComment: (text: string, id: string) => void,\r\n  onClickDeleteComment: (id: string) => void\r\n}\r\n\r\nfunction Task({\r\n  username,\r\n  task, \r\n  deskname, \r\n  comments, \r\n  onClickRemoveTask, \r\n  onSubmitChangeTaskDescription,\r\n  onSubmitAddNewComment,\r\n  onSubmitChangeComment,\r\n  onClickDeleteComment\r\n}: TaskProps) {\r\n  const [hasTaskClicked, setHasTaskClicked] = useState(false);\r\n\r\n  function onClick(e: React.MouseEvent<HTMLButtonElement>) {\r\n    e.stopPropagation();\r\n    onClickRemoveTask(task.id);\r\n  }\r\n\r\n  function onClickChangeTaskPopupVisibility() {\r\n    setHasTaskClicked(prev => !prev);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Root onClick={onClickChangeTaskPopupVisibility}>\r\n        <Container>\r\n          <Text>{task.title}</Text>\r\n          <DeleteTaskButton aria-label='delete task' onClick={onClick}/>\r\n        </Container>\r\n        <CommentsCounter>comments: {comments.length}</CommentsCounter>\r\n      </Root>\r\n      {hasTaskClicked && <TaskPopup \r\n        username={username}\r\n        deskname={deskname} \r\n        task={task}\r\n        comments={comments}\r\n        onClickChangeTaskPopupVisibility={onClickChangeTaskPopupVisibility}\r\n        onSubmitChangeTaskDescription={onSubmitChangeTaskDescription}\r\n        onSubmitAddNewComment={onSubmitAddNewComment}\r\n        onSubmitChangeComment={onSubmitChangeComment}\r\n        onClickDeleteComment={onClickDeleteComment}\r\n      />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Task;\r\n\r\nconst Root= styled.li`\r\n  margin-bottom: 10px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-bottom-right-radius: 3px;\r\n  border-bottom: 1px solid black;\r\n`\r\n\r\nconst Text = styled.p`\r\n  font-size: 18px;\r\n`\r\n\r\nconst DeleteTaskButton = styled.button`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 3px;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 9px;\r\n    left: 3px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 9px;\r\n    left: 3px;\r\n    transform: rotate(45deg);\r\n  }\r\n`\r\n\r\nconst CommentsCounter = styled.p`\r\n  text-align: right;\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Task as TaskType, Comment} from '../../types';\r\nimport ChangeHeaderForm from '../ChangeHeaderForm';\r\nimport Task from '../Task';\r\n\r\ninterface DeskProps {\r\n  title: string,\r\n  username: string,\r\n  tasks: TaskType[],\r\n  comments: Comment[],\r\n  deskId: string,\r\n  onClickRemoveDesk: (id: string) => void,\r\n  updateDeskTitle: (title: string, id: string) => void,\r\n  onSubmitAddNewTask: (title: string, id: string, username: string) => void,\r\n  onClickRemoveTask: (id: string) => void,\r\n  onSubmitChangeTaskDescription: (description: string, id: string) => void,\r\n  onSubmitAddNewComment: (author: string, text: string, id: string) => void,\r\n  onSubmitChangeComment: (text: string, id: string) => void,\r\n  onClickDeleteComment: (id: string) => void\r\n}\r\n\r\nfunction Desk({\r\n  title,\r\n  username, \r\n  tasks, \r\n  comments,\r\n  deskId, \r\n  onClickRemoveDesk, \r\n  updateDeskTitle, \r\n  onSubmitAddNewTask, \r\n  onClickRemoveTask,\r\n  onSubmitChangeTaskDescription,\r\n  onSubmitAddNewComment,\r\n  onSubmitChangeComment,\r\n  onClickDeleteComment\r\n}: DeskProps) {\r\n  const [hasDeskHeaderClicked, setHasDeskHeaderClicked] = useState(false);\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function changeFormVisibility() {\r\n    setHasDeskHeaderClicked(prev => !prev);\r\n  }\r\n\r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    onSubmitAddNewTask(inputValue, deskId, username);\r\n    setInputValue('');\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  function onBlurHideHeaderForm() {\r\n    setHasDeskHeaderClicked(false)\r\n  }\r\n\r\n  return (\r\n    <DeskContainer>\r\n      <DeskHeaderWrapper>\r\n        {hasDeskHeaderClicked? (\r\n          <ChangeHeaderForm \r\n            deskname={title} \r\n            deskId={deskId} \r\n            updateDeskTitle={updateDeskTitle} \r\n            changeFormVisibility={changeFormVisibility}\r\n            onBlurHideHeaderForm={onBlurHideHeaderForm}\r\n          />\r\n          ) : (\r\n          <>\r\n            <DeskHeader onClick={() => setHasDeskHeaderClicked(true)}>{title}</DeskHeader>\r\n            <RemoveDeskButton type='button' onClick={() => {onClickRemoveDesk(deskId)}}>Remove desk</RemoveDeskButton>\r\n          </>\r\n        )}\r\n      </DeskHeaderWrapper>\r\n      <NewTaskForm onSubmit={onSubmit}>\r\n        <NewTaskLabel htmlFor='newTask'>New task</NewTaskLabel>\r\n        <NewTaskInput type='text' name='newTask' id='newTask' placeholder='New task' autoComplete='off' value={inputValue} onChange={onChange} required/>\r\n        <AddNewTaskButton type='submit'>Confirm</AddNewTaskButton>\r\n      </NewTaskForm>\r\n      <ul>\r\n        {tasks.map((task) => {\r\n          return (\r\n            <Task \r\n              key={task.id}\r\n              username={username} \r\n              task={task} \r\n              deskname={title} \r\n              comments={comments.filter(comment => comment.taskId === task.id)}\r\n              onClickRemoveTask={onClickRemoveTask}\r\n              onSubmitChangeTaskDescription={onSubmitChangeTaskDescription}\r\n              onSubmitAddNewComment={onSubmitAddNewComment}\r\n              onSubmitChangeComment={onSubmitChangeComment}\r\n              onClickDeleteComment={onClickDeleteComment}\r\n            />\r\n          )})\r\n        }\r\n      </ul>\r\n    </DeskContainer>\r\n  )\r\n}\r\n\r\nexport default Desk;\r\n\r\nconst DeskContainer = styled.div`\r\n  margin-right: 7px;\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  min-width: 300px;\r\n  height: fit-content;\r\n  background-color: snow;\r\n  border: 2px solid black;\r\n  border-radius: 10px;\r\n\r\n  &:nth-child(4n) {\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst DeskHeaderWrapper = styled.div`\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst DeskHeader = styled.h2`\r\n  margin-right: 25px;\r\n  font-size: 24px;\r\n  font-weight: 800;\r\n  text-align: center;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  &:active {\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst RemoveDeskButton = styled.button`\r\n  padding: 3px 5px;\r\n  font-size: 16px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst NewTaskForm = styled.form`\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst NewTaskLabel = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst NewTaskInput = styled.input`\r\n  margin-right: 10px;\r\n  font-size: 18px;\r\n  border-top: none;\r\n  border-right: none;\r\n  border-left: none;\r\n  border-image: initial;\r\n  border-bottom: 1px solid black;\r\n  background-color: transparent;\r\n`\r\n\r\nconst AddNewTaskButton = styled.button`\r\n  padding: 5px 20px;\r\n  font-size: 18px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  background-color: black;\r\n`","import React, { useState, useEffect } from 'react';\r\nimport './assets/css/normalize.css';\r\nimport './assets/css/reset.css';\r\nimport './assets/css/fonts.css';\r\nimport './assets/css/common.css';\r\nimport './styles.css';\r\nimport styled from 'styled-components';\r\nimport { v4 as uuidv4} from 'uuid';\r\nimport Autorization from './components/Autorization';\r\nimport Header from './components/Header';\r\nimport Desk from './components/Desk';\r\nimport { State } from './types';\r\nconst initialUsername = localStorage.getItem('lastUser') || '';\r\nconst initialStateJSON = localStorage.getItem('state');\r\nconst initialState = {desks: [], tasks: [], comments: []};\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState(initialUsername);\r\n  const [state, setState] = useState<State>(initialStateJSON ? JSON.parse(initialStateJSON) : initialState);\r\n  const isAuthorized = Boolean(username);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('state', JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  function handleChangeUser(username: string) {\r\n    localStorage.setItem('lastUser', username);\r\n    setUsername(username);\r\n  }\r\n\r\n  function handleSignOut() {\r\n    setUsername('');\r\n  }\r\n\r\n  function onSubmitAddNewDesk(title: string) {\r\n    const newDesk = {title, id: uuidv4()};\r\n    setState({\r\n      ...state, \r\n      desks: [...state.desks, newDesk]\r\n    });\r\n  }\r\n\r\n  function onClickRemoveAllDesks() {\r\n    setState(initialState);\r\n  }\r\n\r\n  function onClickRemoveDesk(id: string) {\r\n    setState({\r\n      ...state, \r\n      desks: state.desks.filter(desk => desk.id !== id)\r\n    });\r\n  }\r\n\r\n  function updateDeskTitle(title: string, id: string) {\r\n    setState({\r\n      ...state, \r\n      desks: state.desks.map(desk => {\r\n        if (desk.id === id) {\r\n          desk.title = title;\r\n        }\r\n\r\n        return desk;\r\n      })\r\n    });\r\n  }\r\n\r\n  function onSubmitAddNewTask(title: string, id: string, username: string) {\r\n    const newTask = {title, id: uuidv4(), description: '', author: username, deskId: id};\r\n    \r\n    setState({\r\n      ...state, \r\n      tasks: [...state.tasks, newTask]\r\n    });\r\n  }\r\n\r\n  function onClickRemoveTask(id: string) {\r\n    setState({\r\n      ...state, \r\n      tasks: state.tasks.filter(task => task.id !== id)\r\n    });\r\n  }\r\n\r\n  function onSubmitChangeTaskDescription(description: string, id: string) {\r\n    setState({\r\n      ...state,\r\n      tasks: state.tasks.map(task => {\r\n        if (task.id === id) {\r\n          task.description = description;\r\n        }\r\n\r\n        return task;\r\n      })\r\n    });\r\n  }\r\n\r\n  function onSubmitAddNewComment(author: string, text: string, id: string) {\r\n    const newComment = {author: author, text, id: uuidv4(), taskId: id}\r\n    \r\n    setState({\r\n      ...state,\r\n      comments: [...state.comments, newComment]\r\n    });\r\n  }\r\n\r\n  function onSubmitChangeComment(text: string, id: string) {\r\n    setState({\r\n      ...state,\r\n      comments: state.comments.map(comment => {\r\n        if (comment.id === id) {\r\n          comment.text = text;\r\n        }\r\n\r\n        return comment;\r\n      })\r\n    });\r\n  }\r\n\r\n  function onClickDeleteComment(id: string) {\r\n    setState({\r\n      ...state,\r\n      comments: state.comments.filter(comment => comment.id !== id)\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <HiddenHeader>Canban desk</HiddenHeader>\r\n      {isAuthorized ? (\r\n        <>\r\n          <Header \r\n            username={username} \r\n            handleSignOut={handleSignOut} \r\n            onSubmitAddNewDesk={onSubmitAddNewDesk}\r\n            onClickRemoveAllDesks={onClickRemoveAllDesks}\r\n          />\r\n          <DesksContainer>\r\n            {state.desks.map((desk) => {\r\n              return (\r\n                <Desk \r\n                  key={desk.id}\r\n                  title={desk.title} \r\n                  username={username}\r\n                  tasks={state.tasks.filter(task => task.deskId === desk.id)}\r\n                  comments={state.comments}\r\n                  deskId={desk.id} \r\n                  onClickRemoveDesk={onClickRemoveDesk} \r\n                  updateDeskTitle={updateDeskTitle}\r\n                  onSubmitAddNewTask={onSubmitAddNewTask}\r\n                  onClickRemoveTask={onClickRemoveTask}\r\n                  onSubmitChangeTaskDescription={onSubmitChangeTaskDescription}\r\n                  onSubmitAddNewComment={onSubmitAddNewComment}\r\n                  onSubmitChangeComment={onSubmitChangeComment}\r\n                  onClickDeleteComment={onClickDeleteComment} \r\n                  // отфильтровать таски по id доски и комменты по id таски\r\n                />\r\n              )\r\n            })}\r\n          </DesksContainer>\r\n        </> \r\n      ) : (\r\n        <Autorization handleChangeUser={handleChangeUser}/> \r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\nconst Container = styled.div`\r\n  margin: 0 auto;\r\n  width: 1424px;\r\n`\r\n\r\nconst HiddenHeader = styled.h1`\r\n  font-size: 0;\r\n`\r\n\r\nconst DesksContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}