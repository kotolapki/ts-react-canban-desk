{"version":3,"sources":["redux/types.ts","redux/actions.ts","components/Autorization/Autorization.tsx","components/Header/Header.tsx","components/ChangeHeaderForm/ChangeHeaderForm.tsx","components/TaskPopupDescriptionForm/TaskPopupDescriptionForm.tsx","components/TaskPopupCommentForm/TaskPopupCommentForm.tsx","components/Comment/Comment.tsx","components/TaskPopup/TaskPopup.tsx","components/Task/Task.tsx","components/Desk/Desk.tsx","App.tsx","redux/rootReducer.ts","reportWebVitals.ts","index.tsx"],"names":["SET_USERNAME","ADD_NEW_DESK","UPDATE_DESKNAME","REMOVE_DESK","REMOVE_ALL_DESKS","ADD_NEW_TASK","DELETE_TASK","UPDATE_TASK_DESCRIPTION","ADD_NEW_COMMENT","CHANGE_COMMENT","DELETE_COMMENT","setUsername","username","type","payload","removeAllDesks","Autorization","dispatch","useDispatch","useState","inputValue","setInputValue","Container","Form","onSubmit","e","preventDefault","Label","htmlFor","Input","name","id","autoComplete","placeholder","value","onChange","target","required","SubmitBtn","styled","div","form","label","input","button","Header","useSelector","state","AppHeader","WelcomeText","Button","onClick","NewDeskForm","title","uuidv4","currentTarget","reset","FormLabel","FormInput","RemoveDesksButton","header","p","ChangeHeaderForm","deskname","deskId","changeFormVisibility","onBlurHideHeaderForm","textInput","useRef","useEffect","current","focus","HeaderForm","onBlur","ref","TaskPopupDescriptionForm","onClickChangeTaskDescriptionFormVisibility","initialValue","taskId","TaskPopupForm","description","stopPropagation","TaskInputLabel","TaskDescriptionInput","FormBtnsWrapper","FormSubmitBtn","CloseInputFormBtn","TaskPopupCommentForm","onFocusShowCommentBtnsWrapper","hasCommentFormFocused","hideCommentBtnsWrapper","author","text","TaskCommentLabel","TaskCommentTextInput","onFocus","aria-label","Comment","comment","hasCommentClicked","setHasCommentClicked","Root","Author","BtnsWrapper","Text","li","TaskPopup","task","onClickChangeTaskPopupVisibility","comments","filter","hasTaskDescriptionClicked","setHasTaskDescriptionClicked","setHasCommentFormFocused","prev","handleWindowKeyPress","key","window","addEventListener","removeEventListener","handleWindowClick","TaskPopupOverlay","TaskPopupContainer","TaskPopupHeader","TaskName","CloseTaskPopupBtn","DeskName","TaskAuthor","TaskDescriptionHeader","TaskDescription","length","map","h3","Task","hasTaskClicked","setHasTaskClicked","DeleteTaskButton","CommentsCounter","Desk","tasks","hasDeskHeaderClicked","setHasDeskHeaderClicked","DeskContainer","DeskHeaderWrapper","DeskHeader","RemoveDeskButton","removeDesk","NewTaskForm","addNewTask","NewTaskLabel","NewTaskInput","AddNewTaskButton","h2","App","isAuthorized","Boolean","localStorage","setItem","JSON","stringify","HiddenHeader","DesksContainer","desks","desk","h1","initialStateJSON","getItem","initialState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","parse","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e911dfe.chunk.js","sourcesContent":["export const SET_USERNAME = 'SET_USERNAME';\r\nexport const ADD_NEW_DESK = 'ADD_NEW_DESK';\r\nexport const UPDATE_DESKNAME = 'CHANGE_DESKNAME';\r\nexport const REMOVE_DESK = 'REMOVE_DESK';\r\nexport const REMOVE_ALL_DESKS = 'REMOVE_ALL_DESKS';\r\nexport const ADD_NEW_TASK = 'ADD_NEW_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const UPDATE_TASK_DESCRIPTION = 'CHANGE_TASK_DESCRIPTION';\r\nexport const ADD_NEW_COMMENT = 'ADD_NEW_COMMENT';\r\nexport const CHANGE_COMMENT = 'CHANGE_COMMENT';\r\nexport const DELETE_COMMENT = 'DELETE_COMMENT';","import { \r\n  SET_USERNAME, \r\n  ADD_NEW_DESK, \r\n  UPDATE_DESKNAME, \r\n  REMOVE_DESK, \r\n  REMOVE_ALL_DESKS, \r\n  ADD_NEW_TASK, \r\n  DELETE_TASK, \r\n  UPDATE_TASK_DESCRIPTION, \r\n  ADD_NEW_COMMENT, \r\n  CHANGE_COMMENT, \r\n  DELETE_COMMENT \r\n} from './types';\r\nimport { v4 as uuidv4} from 'uuid';\r\n\r\nexport function setUsername(username: string) {\r\n  return {\r\n    type: SET_USERNAME,\r\n    payload: {\r\n      username\r\n    }\r\n  }\r\n}\r\n\r\nexport function addNewDesk(title: string) {\r\n  return {\r\n    type: ADD_NEW_DESK,\r\n    payload: {\r\n      title,\r\n      id: uuidv4()\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateDeskTitle(title: string, id: string) {\r\n  return {\r\n    type: UPDATE_DESKNAME,\r\n    payload: {\r\n      title,\r\n      id\r\n    }\r\n  }\r\n}\r\n\r\nexport function removeDesk(deskId: string) {\r\n  return {\r\n    type: REMOVE_DESK,\r\n    payload: {\r\n      deskId\r\n    }\r\n  }\r\n}\r\n\r\nexport function removeAllDesks() {\r\n  return {\r\n    type: REMOVE_ALL_DESKS\r\n  }\r\n}\r\n\r\nexport function addNewTask(title: string, deskId: string, author: string) {\r\n  return {\r\n    type: ADD_NEW_TASK,\r\n    payload: {\r\n      title, \r\n      id: uuidv4(), \r\n      description: '', \r\n      author, \r\n      deskId\r\n    }\r\n  }\r\n}\r\n\r\nexport function deleteTask(id: string) {\r\n  return {\r\n    type: DELETE_TASK,\r\n    payload: {\r\n      id\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateTaskDescription(description: string, id: string) {\r\n  return {\r\n    type: UPDATE_TASK_DESCRIPTION,\r\n    payload: {\r\n      description, \r\n      id\r\n    }\r\n  }\r\n}\r\n\r\nexport function addNewComment(author: string, text: string, id: string) {\r\n  return {\r\n    type: ADD_NEW_COMMENT,\r\n    payload: {\r\n      author, \r\n      text, \r\n      id: uuidv4(), \r\n      taskId: id\r\n    }\r\n  }\r\n}\r\n\r\nexport function changeComment(text: string, id: string) {\r\n  return {\r\n    type: CHANGE_COMMENT,\r\n    payload: {\r\n      text,\r\n      id\r\n    }\r\n  }\r\n}\r\n\r\nexport function deleteComment(id: string) {\r\n  return {\r\n    type: DELETE_COMMENT,\r\n    payload: {\r\n      id\r\n    }\r\n  }\r\n}","import React, { ChangeEvent, FormEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { setUsername } from '../../redux/actions';\r\n\r\nfunction Autorization() {\r\n  const dispatch = useDispatch();\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function onSubmit(e: FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    dispatch(setUsername(inputValue));\r\n  }\r\n\r\n  function onChange(e: ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Form onSubmit={onSubmit}>\r\n        <Label htmlFor='login'>Enter your name</Label>\r\n        <Input type='text' name='login' id='login' autoComplete='off' placeholder='Your name' value={inputValue} onChange={onChange} required/>\r\n        <SubmitBtn type='submit'>Confirm</SubmitBtn>\r\n      </Form>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Autorization;\r\n\r\nconst Container = styled.div`\r\n  padding: 30px 80px;\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  border: 2px solid black;\r\n  border-radius: 10px;\r\n`\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`\r\n\r\nconst Label = styled.label`\r\n  margin-bottom: 15px;\r\n  font-size: 36px;\r\n  font-weight: 300;\r\n`\r\n\r\nconst Input = styled.input`\r\n  margin-bottom: 15px;\r\n  padding: 5px;\r\n  font-size: 20px;\r\n  text-align: center;\r\n  border: none;\r\n  border-bottom: 1px solid black;\r\n`\r\n\r\nconst SubmitBtn = styled.button`\r\n  padding: 8px 15px;\r\n  font-size: 22px;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { addNewDesk, removeAllDesks, setUsername } from '../../redux/actions';\r\nimport { State } from '../../types';\r\n\r\nfunction Header() {\r\n  const dispatch = useDispatch();\r\n  const username = useSelector((state: State) => state.username);\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    dispatch(addNewDesk(inputValue));\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <AppHeader>\r\n      <WelcomeText>Hello, {username}!</WelcomeText>\r\n      <Button type='button' onClick={() => dispatch(setUsername(''))}>Change user</Button>\r\n      <NewDeskForm onSubmit={onSubmit}>\r\n        <FormLabel htmlFor='deskname'>Enter new deskname</FormLabel>\r\n        <FormInput type='text' name='deskname' id='deskname' placeholder='Deskname' autoComplete='off' onChange={onChange} required/>\r\n        <Button type='submit'>Confirm</Button>\r\n      </NewDeskForm>\r\n      <RemoveDesksButton onClick={() => dispatch(removeAllDesks)}>Remove all desks</RemoveDesksButton>\r\n    </AppHeader>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n\r\nconst AppHeader = styled.header`\r\n  margin-bottom: 30px;\r\n  padding-top: 40px;\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n\r\nconst WelcomeText = styled.p`\r\n  margin-right: 20px;\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`\r\n\r\nconst Button = styled.button`\r\n  margin-right: 20px;\r\n  padding: 3px 10px;\r\n  font-size: 20px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst RemoveDesksButton = styled(Button)`\r\n  margin-right: 0;\r\n`\r\n\r\nconst NewDeskForm = styled.form`\r\n  display: flex;\r\n  align-content: stretch;\r\n`\r\n\r\nconst FormLabel = styled.label`\r\n  margin-right: 15px;\r\n  font-size: 20px;\r\n  align-self: center;\r\n`\r\n\r\nconst FormInput = styled.input`\r\n  margin-right: 15px;\r\n  font-size: 20px;\r\n  border: none;\r\n  border-image: initial;\r\n  border-bottom: 1px solid black;\r\n`","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { updateDeskTitle } from '../../redux/actions';\r\n\r\ninterface Props {\r\n  deskname: string,\r\n  deskId: string,\r\n  changeFormVisibility: () => void,\r\n  onBlurHideHeaderForm: () => void\r\n}\r\n\r\nfunction ChangeHeaderForm({deskname, deskId, changeFormVisibility, onBlurHideHeaderForm}: Props) {\r\n  const dispatch = useDispatch();\r\n  const [inputValue, setInputValue] = useState(deskname);\r\n  const textInput = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (textInput.current !== null) {\r\n      textInput.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    dispatch(updateDeskTitle(inputValue, deskId));\r\n    changeFormVisibility();\r\n  }\r\n\r\n  return (\r\n    <HeaderForm onSubmit={onSubmit} onBlur={onBlurHideHeaderForm}>\r\n      <Label>Change deskname</Label>\r\n      <Input type='text' ref={textInput} name='deskname' id='deskname' placeholder={inputValue} value={inputValue} autoComplete='off' onChange={onChange} required/>\r\n    </HeaderForm>\r\n  )\r\n}\r\n\r\nexport default ChangeHeaderForm;\r\n\r\nconst HeaderForm = styled.form`\r\n  margin-bottom: 15px;\r\n  width: 100%;\r\n  display: flex;\r\n`\r\n\r\nconst Label = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst Input = styled.input`\r\n  margin: 0px auto 10px;\r\n  width: min-content;\r\n  text-align: center;\r\n  font-size: 24px;\r\n  font-weight: 800;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-bottom: 1px solid black;\r\n`","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { updateTaskDescription } from '../../redux/actions';\r\n\r\ninterface TaskPopupDescriptionFormProps {\r\n  onClickChangeTaskDescriptionFormVisibility: () => void,\r\n  initialValue: string,\r\n  taskId: string\r\n}\r\n\r\nfunction TaskPopupDescriptionForm({\r\n  onClickChangeTaskDescriptionFormVisibility,\r\n  initialValue,\r\n  taskId}: TaskPopupDescriptionFormProps) {\r\n  const dispatch = useDispatch();\r\n  const [inputValue, setInputValue] = useState(initialValue);\r\n  \r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    dispatch(updateTaskDescription(inputValue, taskId));\r\n    onClickChangeTaskDescriptionFormVisibility();\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  function onClick() {\r\n    onClickChangeTaskDescriptionFormVisibility();\r\n  }\r\n\r\n  return (\r\n    <TaskPopupForm onSubmit={onSubmit} onClick={(e) => e.stopPropagation()}>\r\n      <TaskInputLabel htmlFor='taskDescription'>Change description</TaskInputLabel>\r\n      <TaskDescriptionInput\r\n        name='taskDescription'\r\n        placeholder='Add task description' \r\n        autoComplete='off'\r\n        type='text' \r\n        id='taskDescription' \r\n        value={inputValue}\r\n        onChange={onChange}\r\n      />\r\n      <FormBtnsWrapper>\r\n        <FormSubmitBtn type='submit'>Confirm</FormSubmitBtn>\r\n        <CloseInputFormBtn type='button' onClick={onClick}/>\r\n      </FormBtnsWrapper>\r\n    </TaskPopupForm>\r\n  )\r\n}\r\n\r\nexport default TaskPopupDescriptionForm;\r\n\r\nconst TaskPopupForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst TaskInputLabel = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst TaskDescriptionInput = styled.input`\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  width: 100%;\r\n  font-size: 18px;\r\n  border: 2px solid black;\r\n  border-radius: 5px;\r\n  resize: none;\r\n  outline: none;\r\n  box-sizing: border-box;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  &:active {\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst FormBtnsWrapper = styled.div`\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n`\r\n\r\nconst FormSubmitBtn = styled.button`\r\n  margin-right: 10px;\r\n  padding: 4px 10px;\r\n  font-size: 16px;\r\n  color: white;\r\n  background-color: black;\r\n  text-transform: uppercase;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst CloseInputFormBtn = styled.button`\r\n  width: 28px;\r\n  height: 28px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 13px;\r\n    left: 2px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 13px;\r\n    left: 2px;\r\n    transform: rotate(45deg);\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { addNewComment } from '../../redux/actions';\r\nimport { State } from '../../types';\r\n\r\ninterface TaskPopupCommentFormProps {\r\n  taskId: string,\r\n  onFocusShowCommentBtnsWrapper: () => void,\r\n  hasCommentFormFocused: boolean,\r\n  hideCommentBtnsWrapper: () => void\r\n}\r\n\r\nfunction TaskPopupCommentForm({ \r\n  taskId, \r\n  onFocusShowCommentBtnsWrapper, \r\n  hasCommentFormFocused, \r\n  hideCommentBtnsWrapper\r\n}: TaskPopupCommentFormProps) {\r\n  const username = useSelector((state: State) => state.username);\r\n  const dispatch = useDispatch();\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    dispatch(addNewComment(username, inputValue, taskId));\r\n    hideCommentBtnsWrapper();\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <TaskPopupForm onSubmit={onSubmit} onClick={e => e.stopPropagation()}>\r\n      <TaskCommentLabel htmlFor='comment'>Enter new comment</TaskCommentLabel>\r\n      <TaskCommentTextInput \r\n        name='comment' \r\n        placeholder='Add new comment' \r\n        autoComplete='off'\r\n        type='text' \r\n        id='comment' \r\n        onFocus={() => onFocusShowCommentBtnsWrapper()} \r\n        onChange={onChange}\r\n        required\r\n      />\r\n      {hasCommentFormFocused && \r\n        <FormBtnsWrapper>\r\n          <FormSubmitBtn type='submit'>Confirm</FormSubmitBtn>\r\n          <CloseInputFormBtn type='button' aria-label='hide comment controls' onClick={() => hideCommentBtnsWrapper()}/>\r\n        </FormBtnsWrapper>\r\n      }\r\n    </TaskPopupForm>\r\n  )\r\n}\r\n\r\nexport default TaskPopupCommentForm;\r\n\r\nconst TaskPopupForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst TaskCommentLabel = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst TaskCommentTextInput = styled.input`\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  width: 100%;\r\n  font-size: 18px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  resize: none;\r\n  box-sizing: border-box;\r\n  background: Silver;\r\n`\r\n\r\nconst FormBtnsWrapper = styled.div`\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n`\r\n\r\nconst FormSubmitBtn = styled.button`\r\n  margin-right: 10px;\r\n  padding: 4px 10px;\r\n  font-size: 16px;\r\n  color: white;\r\n  background-color: black;\r\n  text-transform: uppercase;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst CloseInputFormBtn = styled.button`\r\n  width: 28px;\r\n  height: 28px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 13px;\r\n    left: 2px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 25px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 13px;\r\n    left: 2px;\r\n    transform: rotate(45deg);\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { changeComment, deleteComment } from '../../redux/actions';\r\nimport { Comment as CommentType, State } from '../../types';\r\n\r\ninterface CommentProps {\r\n  comment: CommentType\r\n}\r\n\r\nfunction Comment({\r\n  comment\r\n}: CommentProps) {\r\n  const username = useSelector((state: State) => state.username);\r\n  const dispatch = useDispatch();\r\n  const [hasCommentClicked, setHasCommentClicked] = useState(false);\r\n  const [inputValue, setInputValue] = useState(comment.text);\r\n\r\n  function onClickShowCommentForm() {\r\n    setHasCommentClicked(true);\r\n    setInputValue(comment.text);\r\n  }\r\n\r\n  function onClickHideCommentForm() {\r\n    setHasCommentClicked(false);\r\n    setInputValue(comment.text);\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    dispatch(changeComment(inputValue, comment.id));\r\n    setHasCommentClicked(false);\r\n  }\r\n\r\n  return (\r\n    <Root onClick={(e) => e.stopPropagation()}>\r\n      <Author>{comment.author}</Author>\r\n      {hasCommentClicked ?\r\n        (\r\n          <Form onSubmit={onSubmit}>\r\n            <Label>Change comment</Label>\r\n            <Input\r\n              name='changeComment' \r\n              placeholder='comment text' \r\n              autoComplete='off'\r\n              type='text' \r\n              id='changeComment'\r\n              value={inputValue}\r\n              onChange={onChange}\r\n            />\r\n            <BtnsWrapper>\r\n              <Button type='submit'>Confirm</Button>\r\n              <Button type='button' onClick={onClickHideCommentForm}>Cancel</Button>\r\n            </BtnsWrapper>\r\n          </Form>\r\n          )\r\n        :\r\n        (<>\r\n          <Text>{comment.text}</Text>\r\n          {username === comment.author && \r\n            <BtnsWrapper>\r\n              <Button type='button' onClick={onClickShowCommentForm}>change</Button>\r\n              <Button type='button' onClick={() => dispatch(deleteComment(comment.id))}>delete</Button>\r\n            </BtnsWrapper>\r\n          }\r\n        </>)\r\n      }\r\n    </Root>\r\n  )\r\n}\r\n\r\nexport default Comment;\r\n\r\nconst Root = styled.li`\r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst Author = styled.p`\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n  font-weight: 800;\r\n`\r\n\r\nconst Text = styled.p`\r\n  margin-bottom: 5px;\r\n  font-size: 16px;\r\n`\r\n\r\nconst BtnsWrapper = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst Button = styled.button`\r\n  margin-right: 10px;\r\n  padding: 3px 5px;\r\n  font-size: 14px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst Label = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst Input = styled.input`\r\n  margin-bottom: 5px;\r\n  padding: 3px;\r\n  width: 100%;\r\n  font-size: 16px;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  resize: none;\r\n  box-sizing: border-box;\r\n`","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Task, State } from '../../types';\r\nimport TaskPopupDescriptionForm from '../TaskPopupDescriptionForm';\r\nimport TaskPopupCommentForm from '../TaskPopupCommentForm';\r\nimport Comment from '../Comment';\r\nimport { useSelector } from 'react-redux';\r\n\r\ninterface TaskPopupProps {\r\n  deskname: string,\r\n  task: Task,\r\n  onClickChangeTaskPopupVisibility: () => void,\r\n}\r\n\r\nfunction TaskPopup({\r\n  deskname, \r\n  task, \r\n  onClickChangeTaskPopupVisibility\r\n}: TaskPopupProps) {\r\n  const comments = useSelector((state: State) => state.comments).filter(comment => comment.taskId === task.id);\r\n  const [hasTaskDescriptionClicked, setHasTaskDescriptionClicked] = useState(false);\r\n  const [hasCommentFormFocused, setHasCommentFormFocused] = useState(false);\r\n\r\n  useEffect(() => {\r\n    function handleWindowKeyPress(e: KeyboardEvent) {\r\n      if (e.key === 'Escape') {\r\n        onClickChangeTaskPopupVisibility();\r\n      }\r\n    }\r\n\r\n    window.addEventListener('keydown', handleWindowKeyPress);\r\n    return () => window.removeEventListener('keydown', handleWindowKeyPress);\r\n  }, [onClickChangeTaskPopupVisibility])\r\n\r\n  useEffect(() => {\r\n    function handleWindowClick(e: MouseEvent) {\r\n      setHasTaskDescriptionClicked(false);\r\n    }\r\n\r\n    window.addEventListener('click', handleWindowClick);\r\n\r\n    return () => window.removeEventListener('click', handleWindowClick);\r\n  }, [hasTaskDescriptionClicked]);\r\n\r\n  function onClickChangeTaskDescriptionFormVisibility() {\r\n    setHasTaskDescriptionClicked(prev => !prev);\r\n  }\r\n\r\n  function onFocusShowCommentBtnsWrapper() {\r\n    setHasCommentFormFocused(true);\r\n  }\r\n\r\n  function hideCommentBtnsWrapper() {\r\n    setHasCommentFormFocused(false);\r\n  }\r\n\r\n  function onClick(e: React.MouseEvent) {\r\n    const target = e.target as Element;\r\n\r\n    if (target.id === 'overlay' || target.id === 'hidePopupBtn') {\r\n      onClickChangeTaskPopupVisibility();\r\n    }\r\n\r\n    setHasCommentFormFocused(false);\r\n  }\r\n\r\n  function handleDescriptionClick(e: React.MouseEvent) {\r\n    e.stopPropagation();\r\n    onClickChangeTaskDescriptionFormVisibility();\r\n  }\r\n\r\n  return (\r\n    <TaskPopupOverlay id='overlay' onClick={onClick}>\r\n      <TaskPopupContainer>\r\n        <TaskPopupHeader>\r\n          <TaskName>{task.title}</TaskName>\r\n          <CloseTaskPopupBtn type='button' aria-label='hide task window' id='hidePopupBtn'/>\r\n        </TaskPopupHeader>\r\n        <DeskName>В доске: {deskname}</DeskName>\r\n        <TaskAuthor>Автор: {task.author}</TaskAuthor>\r\n        <TaskDescriptionHeader>Task description</TaskDescriptionHeader>\r\n        {hasTaskDescriptionClicked ?\r\n          (<TaskPopupDescriptionForm\r\n            onClickChangeTaskDescriptionFormVisibility={onClickChangeTaskDescriptionFormVisibility}\r\n            initialValue={task.description}\r\n            taskId={task.id}\r\n          />)\r\n          :\r\n          (<TaskDescription onClick={handleDescriptionClick}>{task.description? task.description : 'Add task description'}</TaskDescription>)\r\n        }\r\n        <TaskPopupCommentForm\r\n          taskId={task.id}\r\n          onFocusShowCommentBtnsWrapper={onFocusShowCommentBtnsWrapper}\r\n          hasCommentFormFocused={hasCommentFormFocused}\r\n          hideCommentBtnsWrapper={hideCommentBtnsWrapper}\r\n        />\r\n        <ul>\r\n          {comments.length >= 1 && comments.map((comment) => \r\n            <Comment \r\n              key={comment.id}\r\n              comment={comment}\r\n            />)\r\n          }\r\n        </ul>\r\n      </TaskPopupContainer>\r\n    </TaskPopupOverlay>\r\n  )\r\n}\r\n\r\nexport default TaskPopup;\r\n\r\nconst TaskPopupOverlay = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n`\r\n\r\nconst TaskPopupContainer = styled.div`\r\n  padding: 20px;\r\n  width: 500px;\r\n  position: absolute;\r\n  z-index: 2;\r\n  top: 150px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  background-color: white;\r\n`\r\n\r\nconst TaskPopupHeader = styled.div`\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst TaskName = styled.h3`\r\n  font-size: 26px;\r\n  font-weight: 800;\r\n`\r\n\r\nconst CloseTaskPopupBtn = styled.button`\r\n  margin-top: 5px;\r\n  width: 20px;\r\n  height: 20px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 3px;\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 9px;\r\n    left: 3px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 9px;\r\n    left: 3px;\r\n    transform: rotate(45deg);\r\n  }\r\n`\r\n\r\nconst DeskName = styled.p`\r\n  margin-bottom: 10px;\r\n  font-size: 20px;\r\n`\r\n\r\nconst TaskAuthor = styled.p`\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n`\r\n\r\nconst TaskDescriptionHeader = styled.label`\r\n  margin-bottom: 10px;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n`\r\n\r\nconst TaskDescription = styled.p`\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 18px;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  &:active {\r\n    opacity: 0.8;\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { deleteTask } from '../../redux/actions';\r\nimport { Task as TaskType, State} from '../../types';\r\nimport TaskPopup from '../TaskPopup';\r\n\r\ninterface TaskProps {\r\n  task: TaskType,\r\n  deskname: string\r\n}\r\n\r\nfunction Task({\r\n  task, \r\n  deskname\r\n}: TaskProps) {\r\n  const comments = useSelector((state: State) => state.comments).filter(comment => comment.taskId === task.id);\r\n  const dispatch = useDispatch();\r\n  const [hasTaskClicked, setHasTaskClicked] = useState(false);\r\n\r\n  function onClick(e: React.MouseEvent<HTMLButtonElement>) {\r\n    e.stopPropagation();\r\n    dispatch(deleteTask(task.id));\r\n  }\r\n\r\n  function onClickChangeTaskPopupVisibility() {\r\n    setHasTaskClicked(prev => !prev);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Root onClick={onClickChangeTaskPopupVisibility}>\r\n        <Container>\r\n          <Text>{task.title}</Text>\r\n          <DeleteTaskButton aria-label='delete task' onClick={onClick}/>\r\n        </Container>\r\n        <CommentsCounter>comments: {comments.length}</CommentsCounter>\r\n      </Root>\r\n      {hasTaskClicked && <TaskPopup \r\n        deskname={deskname} \r\n        task={task}\r\n        onClickChangeTaskPopupVisibility={onClickChangeTaskPopupVisibility}\r\n      />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Task;\r\n\r\nconst Root= styled.li`\r\n  margin-bottom: 10px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-bottom-right-radius: 3px;\r\n  border-bottom: 1px solid black;\r\n`\r\n\r\nconst Text = styled.p`\r\n  font-size: 18px;\r\n`\r\n\r\nconst DeleteTaskButton = styled.button`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: relative;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 3px;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    bottom: 9px;\r\n    left: 3px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    width: 15px;\r\n    height: 2px;\r\n    background-color: white;\r\n    position: absolute;\r\n    top: 9px;\r\n    left: 3px;\r\n    transform: rotate(45deg);\r\n  }\r\n`\r\n\r\nconst CommentsCounter = styled.p`\r\n  text-align: right;\r\n`","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { addNewTask, removeDesk } from '../../redux/actions';\r\nimport { State } from '../../types';\r\nimport ChangeHeaderForm from '../ChangeHeaderForm';\r\nimport Task from '../Task';\r\n\r\ninterface DeskProps {\r\n  title: string,\r\n  deskId: string\r\n}\r\n\r\nfunction Desk({\r\n  title, \r\n  deskId\r\n}: DeskProps) {\r\n  const username = useSelector((state: State) => state.username);\r\n  const tasks = useSelector((state: State) => state.tasks).filter(task => task.deskId === deskId);\r\n  const dispatch = useDispatch();\r\n  const [hasDeskHeaderClicked, setHasDeskHeaderClicked] = useState(false);\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  function changeFormVisibility() {\r\n    setHasDeskHeaderClicked(prev => !prev);\r\n  }\r\n\r\n  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    dispatch(addNewTask(inputValue, deskId, username));\r\n    setInputValue('');\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  function onBlurHideHeaderForm() {\r\n    setHasDeskHeaderClicked(false)\r\n  }\r\n\r\n  return (\r\n    <DeskContainer>\r\n      <DeskHeaderWrapper>\r\n        {hasDeskHeaderClicked? (\r\n          <ChangeHeaderForm \r\n            deskname={title} \r\n            deskId={deskId} \r\n            changeFormVisibility={changeFormVisibility}\r\n            onBlurHideHeaderForm={onBlurHideHeaderForm}\r\n          />\r\n          ) : (\r\n          <>\r\n            <DeskHeader onClick={() => setHasDeskHeaderClicked(true)}>{title}</DeskHeader>\r\n            <RemoveDeskButton type='button' onClick={() => {dispatch(removeDesk(deskId))}}>Remove desk</RemoveDeskButton>\r\n          </>\r\n        )}\r\n      </DeskHeaderWrapper>\r\n      <NewTaskForm onSubmit={onSubmit}>\r\n        <NewTaskLabel htmlFor='newTask'>New task</NewTaskLabel>\r\n        <NewTaskInput type='text' name='newTask' id='newTask' placeholder='New task' autoComplete='off' value={inputValue} onChange={onChange} required/>\r\n        <AddNewTaskButton type='submit'>Confirm</AddNewTaskButton>\r\n      </NewTaskForm>\r\n      <ul>\r\n        {tasks.map((task) => {\r\n            return (\r\n              <Task \r\n                key={task.id}\r\n                task={task} \r\n                deskname={title}\r\n              />)\r\n          })\r\n        }\r\n      </ul>\r\n    </DeskContainer>\r\n  )\r\n}\r\n\r\nexport default Desk;\r\n\r\nconst DeskContainer = styled.div`\r\n  margin-right: 7px;\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  min-width: 300px;\r\n  height: fit-content;\r\n  background-color: snow;\r\n  border: 2px solid black;\r\n  border-radius: 10px;\r\n\r\n  &:nth-child(4n) {\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst DeskHeaderWrapper = styled.div`\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst DeskHeader = styled.h2`\r\n  margin-right: 25px;\r\n  font-size: 24px;\r\n  font-weight: 800;\r\n  text-align: center;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  &:active {\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst RemoveDeskButton = styled.button`\r\n  padding: 3px 5px;\r\n  font-size: 16px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst NewTaskForm = styled.form`\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst NewTaskLabel = styled.label`\r\n  font-size: 0;\r\n`\r\n\r\nconst NewTaskInput = styled.input`\r\n  margin-right: 10px;\r\n  font-size: 18px;\r\n  border-top: none;\r\n  border-right: none;\r\n  border-left: none;\r\n  border-image: initial;\r\n  border-bottom: 1px solid black;\r\n  background-color: transparent;\r\n`\r\n\r\nconst AddNewTaskButton = styled.button`\r\n  padding: 5px 20px;\r\n  font-size: 18px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  background-color: black;\r\n`","import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './assets/css/normalize.css';\r\nimport './assets/css/reset.css';\r\nimport './assets/css/fonts.css';\r\nimport './assets/css/common.css';\r\nimport './styles.css';\r\nimport styled from 'styled-components';\r\nimport Autorization from './components/Autorization';\r\nimport Header from './components/Header';\r\nimport Desk from './components/Desk';\r\nimport { State } from './types';\r\n\r\nfunction App() {\r\n  const state = useSelector((state: State) => state);\r\n  const isAuthorized = Boolean(state.username);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('state', JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  return (\r\n    <Container>\r\n      <HiddenHeader>Canban desk</HiddenHeader>\r\n      {isAuthorized ? (\r\n        <>\r\n          <Header />\r\n          <DesksContainer>\r\n            {state.desks.map((desk) => {\r\n              return (\r\n                <Desk \r\n                  key={desk.id}\r\n                  title={desk.title}\r\n                  deskId={desk.id}\r\n                />\r\n              )\r\n            })}\r\n          </DesksContainer>\r\n        </> \r\n      ) : (\r\n        <Autorization /> \r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\nconst Container = styled.div`\r\n  margin: 0 auto;\r\n  width: 1424px;\r\n`\r\n\r\nconst HiddenHeader = styled.h1`\r\n  font-size: 0;\r\n`\r\n\r\nconst DesksContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`","import { State, Desk, Task, Comment, Action } from './../types';\r\nimport { \r\n  SET_USERNAME, \r\n  ADD_NEW_DESK, \r\n  UPDATE_DESKNAME, \r\n  REMOVE_DESK, \r\n  REMOVE_ALL_DESKS, \r\n  ADD_NEW_TASK, \r\n  DELETE_TASK, \r\n  UPDATE_TASK_DESCRIPTION, \r\n  ADD_NEW_COMMENT, \r\n  CHANGE_COMMENT, \r\n  DELETE_COMMENT \r\n} from './types';\r\n\r\nconst initialStateJSON = localStorage.getItem('state');\r\nconst initialState:State = {username:'', desks: [], tasks: [], comments: []};\r\n\r\nexport const rootReducer = (state = initialStateJSON ? JSON.parse(initialStateJSON) : initialState, action: Action) => {\r\n  switch (action.type) {\r\n    case SET_USERNAME:\r\n      return {...state, username: action.payload.username}\r\n    case ADD_NEW_DESK:\r\n      return {...state, desks: [...state.desks, action.payload]}\r\n    case UPDATE_DESKNAME:\r\n      return {...state, \r\n        desks: state.desks.map((desk: Desk) => {\r\n          if (desk.id === action.payload.id) {\r\n            return {...desk, title: action.payload.title};\r\n          }\r\n  \r\n          return desk;\r\n        })\r\n      }\r\n    case REMOVE_DESK: {\r\n      return {...state, desks: state.desks.filter((desk: Desk) => desk.id !== action.payload.id)}\r\n    }\r\n    case REMOVE_ALL_DESKS: \r\n      return {initialState}\r\n    case ADD_NEW_TASK:\r\n      return {...state, tasks: [...state.tasks, action.payload]}\r\n    case DELETE_TASK:\r\n      return {...state, tasks: state.tasks.filter((task: Task) => task.id !== action.payload.id)}\r\n    case UPDATE_TASK_DESCRIPTION:\r\n      return {...state,\r\n        tasks: state.tasks.map((task: Task) => {\r\n          if (task.id === action.payload.id) {\r\n            return {...task, description: action.payload.description};\r\n          }\r\n  \r\n          return task;\r\n        })\r\n      }\r\n    case ADD_NEW_COMMENT:\r\n      return {...state, comments: [...state.comments, action.payload]}\r\n    case CHANGE_COMMENT:\r\n      return {...state,\r\n        comments: state.comments.map((comment: Comment) => {\r\n          if (comment.id === action.payload.id) {\r\n            return {...comment, text: action.payload.text};\r\n          }\r\n  \r\n          return comment;\r\n        })\r\n      }\r\n    case DELETE_COMMENT:\r\n      return {...state, comments: state.comments.filter((comment: Comment) => comment.id !== action.payload.id)}\r\n    default: return state;\r\n  }\r\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { rootReducer } from './redux/rootReducer';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}